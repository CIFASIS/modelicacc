class Modelica__Mechanics__Translational__Examples__ElastoGap "Demonstrate usage of ElastoGap"
  parameter Real fixed__s0(quantity = "Length", unit = "m") = 0.0 "Fixed offset position of housing";
  Real fixed__flange__s(quantity = "Length", unit = "m") "Absolute position of flange";
  Real fixed__flange__f(quantity = "Force", unit = "N") "Cut force directed into flange";
  Real rod1__s(quantity = "Length", unit = "m") "Absolute position of center of component (s = flange_a.s + L/2 = flange_b.s - L/2)";
  parameter Real rod1__L(quantity = "Length", unit = "m", start = 0.0) = 2.0 "Length of component, from left flange to right flange (= flange_b.s - flange_a.s)";
  Real rod1__flange_a__s(quantity = "Length", unit = "m") "Absolute position of flange";
  Real rod1__flange_a__f(quantity = "Force", unit = "N") "Cut force directed into flange";
  Real rod1__flange_b__s(quantity = "Length", unit = "m") "Absolute position of flange";
  Real rod1__flange_b__f(quantity = "Force", unit = "N") "Cut force directed into flange";
  Real rod2__s(quantity = "Length", unit = "m") "Absolute position of center of component (s = flange_a.s + L/2 = flange_b.s - L/2)";
  parameter Real rod2__L(quantity = "Length", unit = "m", start = 0.0) = 2.0 "Length of component, from left flange to right flange (= flange_b.s - flange_a.s)";
  Real rod2__flange_a__s(quantity = "Length", unit = "m") "Absolute position of flange";
  Real rod2__flange_a__f(quantity = "Force", unit = "N") "Cut force directed into flange";
  Real rod2__flange_b__s(quantity = "Length", unit = "m") "Absolute position of flange";
  Real rod2__flange_b__f(quantity = "Force", unit = "N") "Cut force directed into flange";
   parameter Real springDamper1__s_nominal(quantity = "Length", unit = "m", min = 0.0) = 0.0001 "Nominal value of s_rel (used for scaling)";
  Real springDamper1__f(quantity = "Force", unit = "N") "Forces between flanges (= flange_b.f)";
  Real springDamper1__flange_a__s(quantity = "Length", unit = "m") "Absolute position of flange";
  Real springDamper1__flange_a__f(quantity = "Force", unit = "N") "Cut force directed into flange";
  Real springDamper1__flange_b__s(quantity = "Length", unit = "m") "Absolute position of flange";
  Real springDamper1__flange_b__f(quantity = "Force", unit = "N") "Cut force directed into flange";
  parameter Boolean springDamper1__useHeatPort = false "=true, if heatPort is enabled";
  Real springDamper1__lossPower(quantity = "Power", unit = "W") "Loss power leaving component via heatPort (> 0, if heat is flowing out of component)";
  parameter Real springDamper1__c(quantity = "TranslationalSpringConstant", unit = "N/m", min = 0.0, start = 1.0) = 10.0 "Spring constant";
  parameter Real springDamper1__d(quantity = "TranslationalDampingConstant", unit = "N.s/m", min = 0.0, start = 1.0) = 1.5 "Damping constant";
  parameter Real springDamper1__s_rel0(quantity = "Length", unit = "m") = 1.0 "Unstretched spring length";
  protected Real springDamper1__f_c(quantity = "Force", unit = "N") "Spring force";
  protected Real springDamper1__f_d(quantity = "Force", unit = "N") "Damping force";
  Real springDamper1__v_rel(quantity = "Velocity", unit = "m/s", start = 0.0, stateSelect = StateSelect.prefer) "Relative velocity (= der(s_rel))";
  Real springDamper1__s_rel(quantity = "Length", unit = "m", start = 1.0, fixed = false, nominal = springDamper1__s_nominal, stateSelect = StateSelect.prefer) "Relative distance (= flange_b.s - flange_a.s)";
   parameter Real springDamper2__s_nominal(quantity = "Length", unit = "m", min = 0.0) = 0.0001 "Nominal value of s_rel (used for scaling)";
  Real springDamper2__f(quantity = "Force", unit = "N") "Forces between flanges (= flange_b.f)";
  Real springDamper2__flange_a__s(quantity = "Length", unit = "m") "Absolute position of flange";
  Real springDamper2__flange_a__f(quantity = "Force", unit = "N") "Cut force directed into flange";
  Real springDamper2__flange_b__s(quantity = "Length", unit = "m") "Absolute position of flange";
  Real springDamper2__flange_b__f(quantity = "Force", unit = "N") "Cut force directed into flange";
  parameter Boolean springDamper2__useHeatPort = false "=true, if heatPort is enabled";
  Real springDamper2__lossPower(quantity = "Power", unit = "W") "Loss power leaving component via heatPort (> 0, if heat is flowing out of component)";
  parameter Real springDamper2__c(quantity = "TranslationalSpringConstant", unit = "N/m", min = 0.0, start = 1.0) = 10.0 "Spring constant";
  parameter Real springDamper2__d(quantity = "TranslationalDampingConstant", unit = "N.s/m", min = 0.0, start = 1.0) = 1.5 "Damping constant";
  parameter Real springDamper2__s_rel0(quantity = "Length", unit = "m") = 1.0 "Unstretched spring length";
  protected Real springDamper2__f_c(quantity = "Force", unit = "N") "Spring force";
  protected Real springDamper2__f_d(quantity = "Force", unit = "N") "Damping force";
  Real springDamper2__v_rel(quantity = "Velocity", unit = "m/s", start = 0.0, stateSelect = StateSelect.prefer) "Relative velocity (= der(s_rel))";
  Real springDamper2__s_rel(quantity = "Length", unit = "m", start = 1.0, fixed = false, nominal = springDamper2__s_nominal, stateSelect = StateSelect.prefer) "Relative distance (= flange_b.s - flange_a.s)";
  Real mass1__s(quantity = "Length", unit = "m", start = 2.0, fixed = true, stateSelect = StateSelect.default) "Absolute position of center of component (s = flange_a.s + L/2 = flange_b.s - L/2)";
  parameter Real mass1__L(quantity = "Length", unit = "m", start = 0.0) = 0.0 "Length of component, from left flange to right flange (= flange_b.s - flange_a.s)";
  Real mass1__flange_a__s(quantity = "Length", unit = "m") "Absolute position of flange";
  Real mass1__flange_a__f(quantity = "Force", unit = "N") "Cut force directed into flange";
  Real mass1__flange_b__s(quantity = "Length", unit = "m") "Absolute position of flange";
  Real mass1__flange_b__f(quantity = "Force", unit = "N") "Cut force directed into flange";
  parameter Real mass1__m(quantity = "Mass", unit = "kg", min = 0.0, start = 1.0) = 1.0 "Mass of the sliding mass";
   Real mass1__a(quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of component";
  Real mass1__v(quantity = "Velocity", unit = "m/s", start = 0.0, fixed = true, stateSelect = StateSelect.default) "Absolute velocity of component";
   parameter Real elastoGap1__s_nominal(quantity = "Length", unit = "m", min = 0.0) = 0.0001 "Nominal value of s_rel (used for scaling)";
  Real elastoGap1__f(quantity = "Force", unit = "N") "Forces between flanges (= flange_b.f)";
  Real elastoGap1__flange_a__s(quantity = "Length", unit = "m") "Absolute position of flange";
  Real elastoGap1__flange_a__f(quantity = "Force", unit = "N") "Cut force directed into flange";
  Real elastoGap1__flange_b__s(quantity = "Length", unit = "m") "Absolute position of flange";
  Real elastoGap1__flange_b__f(quantity = "Force", unit = "N") "Cut force directed into flange";
  parameter Boolean elastoGap1__useHeatPort = false "=true, if heatPort is enabled";
  Real elastoGap1__lossPower(quantity = "Power", unit = "W") "Loss power leaving component via heatPort (> 0, if heat is flowing out of component)";
  parameter Real elastoGap1__c(quantity = "TranslationalSpringConstant", unit = "N/m", min = 0.0, start = 1.0) = 10.0 "Spring constant";
  parameter Real elastoGap1__d(quantity = "TranslationalDampingConstant", unit = "N.s/m", min = 0.0, start = 1.0) = 1.5 "Damping constant";
  parameter Real elastoGap1__s_rel0(quantity = "Length", unit = "m") = 1.5 "Unstretched spring length";
  parameter Real elastoGap1__n(min = 1.0) = 1.0 "Exponent of spring force ( f_c = -c*|s_rel-s_rel0|^n )";
  Boolean elastoGap1__contact "=true, if contact, otherwise no contact";
  protected Real elastoGap1__f_c(quantity = "Force", unit = "N") "Spring force";
  protected Real elastoGap1__f_d2(quantity = "Force", unit = "N") "Linear damping force";
  protected Real elastoGap1__f_d(quantity = "Force", unit = "N") "Linear damping force which is limited by spring force (|f_d| <= |f_c|)";
  Real elastoGap1__v_rel(quantity = "Velocity", unit = "m/s", start = 0.0, stateSelect = StateSelect.prefer) "Relative velocity (= der(s_rel))";
  Real elastoGap1__s_rel(quantity = "Length", unit = "m", start = 1.5, fixed = false, nominal = elastoGap1__s_nominal, stateSelect = StateSelect.prefer) "Relative distance (= flange_b.s - flange_a.s)";
   parameter Real elastoGap2__s_nominal(quantity = "Length", unit = "m", min = 0.0) = 0.0001 "Nominal value of s_rel (used for scaling)";
  Real elastoGap2__f(quantity = "Force", unit = "N") "Forces between flanges (= flange_b.f)";
  Real elastoGap2__flange_a__s(quantity = "Length", unit = "m") "Absolute position of flange";
  Real elastoGap2__flange_a__f(quantity = "Force", unit = "N") "Cut force directed into flange";
  Real elastoGap2__flange_b__s(quantity = "Length", unit = "m") "Absolute position of flange";
  Real elastoGap2__flange_b__f(quantity = "Force", unit = "N") "Cut force directed into flange";
  parameter Boolean elastoGap2__useHeatPort = false "=true, if heatPort is enabled";
  Real elastoGap2__lossPower(quantity = "Power", unit = "W") "Loss power leaving component via heatPort (> 0, if heat is flowing out of component)";
  parameter Real elastoGap2__c(quantity = "TranslationalSpringConstant", unit = "N/m", min = 0.0, start = 1.0) = 10.0 "Spring constant";
  parameter Real elastoGap2__d(quantity = "TranslationalDampingConstant", unit = "N.s/m", min = 0.0, start = 1.0) = 1.5 "Damping constant";
  parameter Real elastoGap2__s_rel0(quantity = "Length", unit = "m") = 1.5 "Unstretched spring length";
  parameter Real elastoGap2__n(min = 1.0) = 1.0 "Exponent of spring force ( f_c = -c*|s_rel-s_rel0|^n )";
  Boolean elastoGap2__contact "=true, if contact, otherwise no contact";
  protected Real elastoGap2__f_c(quantity = "Force", unit = "N") "Spring force";
  protected Real elastoGap2__f_d2(quantity = "Force", unit = "N") "Linear damping force";
  protected Real elastoGap2__f_d(quantity = "Force", unit = "N") "Linear damping force which is limited by spring force (|f_d| <= |f_c|)";
  Real elastoGap2__v_rel(quantity = "Velocity", unit = "m/s", start = 0.0, stateSelect = StateSelect.prefer) "Relative velocity (= der(s_rel))";
  Real elastoGap2__s_rel(quantity = "Length", unit = "m", start = 1.5, fixed = false, nominal = elastoGap2__s_nominal, stateSelect = StateSelect.prefer) "Relative distance (= flange_b.s - flange_a.s)";
  Real mass2__s(quantity = "Length", unit = "m", start = 2.0, fixed = true, stateSelect = StateSelect.default) "Absolute position of center of component (s = flange_a.s + L/2 = flange_b.s - L/2)";
  parameter Real mass2__L(quantity = "Length", unit = "m", start = 0.0) = 0.0 "Length of component, from left flange to right flange (= flange_b.s - flange_a.s)";
  Real mass2__flange_a__s(quantity = "Length", unit = "m") "Absolute position of flange";
  Real mass2__flange_a__f(quantity = "Force", unit = "N") "Cut force directed into flange";
  Real mass2__flange_b__s(quantity = "Length", unit = "m") "Absolute position of flange";
  Real mass2__flange_b__f(quantity = "Force", unit = "N") "Cut force directed into flange";
  parameter Real mass2__m(quantity = "Mass", unit = "kg", min = 0.0, start = 1.0) = 1.0 "Mass of the sliding mass";
   Real mass2__a(quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of component";
  Real mass2__v(quantity = "Velocity", unit = "m/s", start = 0.0, fixed = true, stateSelect = StateSelect.default) "Absolute velocity of component";
  parameter Real d(quantity = "TranslationalDampingConstant", unit = "N.s/m") = 1.5 "Damping constant";
equation
  fixed__flange__s = fixed__s0;
  0.0 = rod1__flange_a__f + rod1__flange_b__f;
  rod1__flange_a__s = rod1__s + (-rod1__L) / 2.0;
  rod1__flange_b__s = rod1__s + rod1__L / 2.0;
  0.0 = rod2__flange_a__f + rod2__flange_b__f;
  rod2__flange_a__s = rod2__s + (-rod2__L) / 2.0;
  rod2__flange_b__s = rod2__s + rod2__L / 2.0;
  springDamper1__f_c = springDamper1__c * (springDamper1__s_rel - springDamper1__s_rel0);
  springDamper1__f_d = springDamper1__d * springDamper1__v_rel;
  springDamper1__f = springDamper1__f_c + springDamper1__f_d;
  springDamper1__lossPower = springDamper1__f_d * springDamper1__v_rel;
  springDamper1__s_rel = springDamper1__flange_b__s - springDamper1__flange_a__s;
  springDamper1__v_rel = der(springDamper1__s_rel);
  springDamper1__flange_b__f = springDamper1__f;
  springDamper1__flange_a__f = -springDamper1__f;
  springDamper2__f_c = springDamper2__c * (springDamper2__s_rel - springDamper2__s_rel0);
  springDamper2__f_d = springDamper2__d * springDamper2__v_rel;
  springDamper2__f = springDamper2__f_c + springDamper2__f_d;
  springDamper2__lossPower = springDamper2__f_d * springDamper2__v_rel;
  springDamper2__s_rel = springDamper2__flange_b__s - springDamper2__flange_a__s;
  springDamper2__v_rel = der(springDamper2__s_rel);
  springDamper2__flange_b__f = springDamper2__f;
  springDamper2__flange_a__f = -springDamper2__f;
  mass1__v = der(mass1__s);
  mass1__a = der(mass1__v);
  mass1__m * mass1__a = mass1__flange_a__f + mass1__flange_b__f;
  mass1__flange_a__s = mass1__s + (-mass1__L) / 2.0;
  mass1__flange_b__s = mass1__s + mass1__L / 2.0;
  elastoGap1__contact = elastoGap1__s_rel < elastoGap1__s_rel0;
  elastoGap1__f_c = smooth(1, if elastoGap1__contact then (-elastoGap1__c) * abs(elastoGap1__s_rel - elastoGap1__s_rel0) ^ elastoGap1__n else 0.0);
  elastoGap1__f_d2 = if elastoGap1__contact then elastoGap1__d * elastoGap1__v_rel else 0.0;
  elastoGap1__f_d = if elastoGap1__contact then if noEvent(elastoGap1__f_d2 < elastoGap1__f_c) then elastoGap1__f_c else if noEvent(elastoGap1__f_d2 > (-elastoGap1__f_c)) then -elastoGap1__f_c else elastoGap1__f_d2 else 0.0;
  elastoGap1__f = elastoGap1__f_c + elastoGap1__f_d;
  elastoGap1__lossPower = elastoGap1__f_d * elastoGap1__v_rel;
  elastoGap1__s_rel = elastoGap1__flange_b__s - elastoGap1__flange_a__s;
  elastoGap1__v_rel = der(elastoGap1__s_rel);
  elastoGap1__flange_b__f = elastoGap1__f;
  elastoGap1__flange_a__f = -elastoGap1__f;
  elastoGap2__contact = elastoGap2__s_rel < elastoGap2__s_rel0;
  elastoGap2__f_c = smooth(1, if elastoGap2__contact then (-elastoGap2__c) * abs(elastoGap2__s_rel - elastoGap2__s_rel0) ^ elastoGap2__n else 0.0);
  elastoGap2__f_d2 = if elastoGap2__contact then elastoGap2__d * elastoGap2__v_rel else 0.0;
  elastoGap2__f_d = if elastoGap2__contact then if noEvent(elastoGap2__f_d2 < elastoGap2__f_c) then elastoGap2__f_c else if noEvent(elastoGap2__f_d2 > (-elastoGap2__f_c)) then -elastoGap2__f_c else elastoGap2__f_d2 else 0.0;
  elastoGap2__f = elastoGap2__f_c + elastoGap2__f_d;
  elastoGap2__lossPower = elastoGap2__f_d * elastoGap2__v_rel;
  elastoGap2__s_rel = elastoGap2__flange_b__s - elastoGap2__flange_a__s;
  elastoGap2__v_rel = der(elastoGap2__s_rel);
  elastoGap2__flange_b__f = elastoGap2__f;
  elastoGap2__flange_a__f = -elastoGap2__f;
  mass2__v = der(mass2__s);
  mass2__a = der(mass2__v);
  mass2__m * mass2__a = mass2__flange_a__f + mass2__flange_b__f;
  mass2__flange_a__s = mass2__s + (-mass2__L) / 2.0;
  mass2__flange_b__s = mass2__s + mass2__L / 2.0;
  fixed__flange__f + rod1__flange_b__f + rod2__flange_a__f = 0.0;
  rod1__flange_a__f + springDamper1__flange_a__f + elastoGap1__flange_a__f = 0.0;
  rod2__flange_b__f + springDamper2__flange_b__f + elastoGap2__flange_b__f = 0.0;
  springDamper1__flange_b__f + mass1__flange_a__f = 0.0;
  springDamper2__flange_a__f + mass1__flange_b__f = 0.0;
  elastoGap1__flange_b__f + mass2__flange_a__f = 0.0;
  elastoGap2__flange_a__f + mass2__flange_b__f = 0.0;
  fixed__flange__s = rod1__flange_b__s;
  fixed__flange__s = rod2__flange_a__s;
  elastoGap1__flange_a__s = rod1__flange_a__s;
  elastoGap1__flange_a__s = springDamper1__flange_a__s;
  elastoGap2__flange_b__s = rod2__flange_b__s;
  elastoGap2__flange_b__s = springDamper2__flange_b__s;
  mass1__flange_a__s = springDamper1__flange_b__s;
  mass1__flange_b__s = springDamper2__flange_a__s;
  elastoGap1__flange_b__s = mass2__flange_a__s;
  elastoGap2__flange_a__s = mass2__flange_b__s;
end Modelica__Mechanics__Translational__Examples__ElastoGap;
