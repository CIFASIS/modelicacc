class pelotita
   parameter Real elastogap1__s_nominal(quantity = "Length", unit = "m", min = 0.0) = 0.0001 "Nominal value of s_rel (used for scaling)";
  Real elastogap1__f(quantity = "Force", unit = "N") "Forces between flanges (= flange_b.f)";
  Real elastogap1__flange_a__s(quantity = "Length", unit = "m") "Absolute position of flange";
  Real elastogap1__flange_a__f(quantity = "Force", unit = "N") "Cut force directed into flange";
  Real elastogap1__flange_b__s(quantity = "Length", unit = "m") "Absolute position of flange";
  Real elastogap1__flange_b__f(quantity = "Force", unit = "N") "Cut force directed into flange";
  parameter Boolean elastogap1__useHeatPort = false "=true, if heatPort is enabled";
  Real elastogap1__lossPower(quantity = "Power", unit = "W") "Loss power leaving component via heatPort (> 0, if heat is flowing out of component)";
  parameter Real elastogap1__c(quantity = "TranslationalSpringConstant", unit = "N/m", min = 0.0, start = 1.0) = 1000.0 "Spring constant";
  parameter Real elastogap1__d(quantity = "TranslationalDampingConstant", unit = "N.s/m", min = 0.0, start = 1.0) = 1.0 "Damping constant";
  parameter Real elastogap1__s_rel0(quantity = "Length", unit = "m") = 0.0 "Unstretched spring length";
  parameter Real elastogap1__n(min = 1.0) = 1.0 "Exponent of spring force ( f_c = -c*|s_rel-s_rel0|^n )";
  Boolean elastogap1__contact "=true, if contact, otherwise no contact";
  protected Real elastogap1__f_c(quantity = "Force", unit = "N") "Spring force";
  protected Real elastogap1__f_d2(quantity = "Force", unit = "N") "Linear damping force";
  protected Real elastogap1__f_d(quantity = "Force", unit = "N") "Linear damping force which is limited by spring force (|f_d| <= |f_c|)";
  Real elastogap1__v_rel(quantity = "Velocity", unit = "m/s", start = 0.0, stateSelect = StateSelect.prefer) "Relative velocity (= der(s_rel))";
  Real elastogap1__s_rel(quantity = "Length", unit = "m", start = 1.0, nominal = elastogap1__s_nominal, stateSelect = StateSelect.prefer) "Relative distance (= flange_b.s - flange_a.s)";
  Real mass1__s(quantity = "Length", unit = "m", start = 1.0, stateSelect = StateSelect.default) "Absolute position of center of component (s = flange_a.s + L/2 = flange_b.s - L/2)";
  parameter Real mass1__L(quantity = "Length", unit = "m", start = 0.0) = 0.0 "Length of component, from left flange to right flange (= flange_b.s - flange_a.s)";
  Real mass1__flange_a__s(quantity = "Length", unit = "m") "Absolute position of flange";
  Real mass1__flange_a__f(quantity = "Force", unit = "N") "Cut force directed into flange";
  Real mass1__flange_b__s(quantity = "Length", unit = "m") "Absolute position of flange";
  Real mass1__flange_b__f(quantity = "Force", unit = "N") "Cut force directed into flange";
  parameter Real mass1__m(quantity = "Mass", unit = "kg", min = 0.0, start = 1.0) = 1.0 "Mass of the sliding mass";
   Real mass1__a(quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of component";
  Real mass1__v(quantity = "Velocity", unit = "m/s", start = 0.0, stateSelect = StateSelect.default) "Absolute velocity of component";
  parameter Boolean constantforce1__useSupport = false "= true, if support flange enabled, otherwise implicitly grounded";
  Real constantforce1__s(quantity = "Length", unit = "m") "Distance between flange and support (= flange.s - support.s)";
  Real constantforce1__flange__s(quantity = "Length", unit = "m") "Absolute position of flange";
  Real constantforce1__flange__f(quantity = "Force", unit = "N") "Cut force directed into flange";
  protected Real constantforce1__s_support(quantity = "Length", unit = "m") "Absolute position of support flange";
  Real constantforce1__f(quantity = "Force", unit = "N") "Accelerating force acting at flange (= flange.f)";
  parameter Real constantforce1__f_constant(quantity = "Force", unit = "N") = -9.8 "Nominal force (if negative, force is acting as load)";
  parameter Real fixed1__s0(quantity = "Length", unit = "m") = 0.0 "Fixed offset position of housing";
  Real fixed1__flange__s(quantity = "Length", unit = "m") "Absolute position of flange";
  Real fixed1__flange__f(quantity = "Force", unit = "N") "Cut force directed into flange";
equation
  elastogap1__contact = elastogap1__s_rel < elastogap1__s_rel0;
  elastogap1__f_c = smooth(1, if elastogap1__contact then (-elastogap1__c) * abs(elastogap1__s_rel - elastogap1__s_rel0) ^ elastogap1__n else 0.0);
  elastogap1__f_d2 = if elastogap1__contact then elastogap1__d * elastogap1__v_rel else 0.0;
  elastogap1__f_d = if elastogap1__contact then if noEvent(elastogap1__f_d2 < elastogap1__f_c) then elastogap1__f_c else if noEvent(elastogap1__f_d2 > (-elastogap1__f_c)) then -elastogap1__f_c else elastogap1__f_d2 else 0.0;
  elastogap1__f = elastogap1__f_c + elastogap1__f_d;
  elastogap1__lossPower = elastogap1__f_d * elastogap1__v_rel;
  elastogap1__s_rel = elastogap1__flange_b__s - elastogap1__flange_a__s;
  elastogap1__v_rel = der(elastogap1__s_rel);
  elastogap1__flange_b__f = elastogap1__f;
  elastogap1__flange_a__f = -elastogap1__f;
  mass1__v = der(mass1__s);
  mass1__a = der(mass1__v);
  mass1__m * mass1__a = mass1__flange_a__f + mass1__flange_b__f;
  mass1__flange_a__s = mass1__s + (-mass1__L) / 2.0;
  mass1__flange_b__s = mass1__s + mass1__L / 2.0;
  constantforce1__f = -constantforce1__f_constant;
  constantforce1__f = constantforce1__flange__f;
  constantforce1__s = constantforce1__flange__s - constantforce1__s_support;
  constantforce1__s_support = 0.0;
  fixed1__flange__s = fixed1__s0;
  elastogap1__flange_a__f + fixed1__flange__f = 0.0;
  elastogap1__flange_b__f + mass1__flange_a__f = 0.0;
  mass1__flange_b__f + constantforce1__flange__f = 0.0;
  elastogap1__flange_a__s = fixed1__flange__s;
  constantforce1__flange__s = mass1__flange_b__s;
  elastogap1__flange_b__s = mass1__flange_a__s;
end pelotita;
