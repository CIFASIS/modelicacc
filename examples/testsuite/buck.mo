class buck
  Real ground1__p__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real ground1__p__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real capacitor1__v(quantity = "ElectricPotential", unit = "V", start = 0.0) "Voltage drop between the two pins (= p.v - n.v)";
  Real capacitor1__i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
  Real capacitor1__p__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real capacitor1__p__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real capacitor1__n__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real capacitor1__n__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  parameter Real capacitor1__C(quantity = "Capacitance", unit = "F", min = 0.0, start = 1.0) = 0.0001 "Capacitance";
  Real resistor1__v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
  Real resistor1__i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
  Real resistor1__p__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real resistor1__p__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real resistor1__n__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real resistor1__n__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  parameter Boolean resistor1__useHeatPort = false "=true, if HeatPort is enabled";
  Real resistor1__LossPower(quantity = "Power", unit = "W") "Loss power leaving component via HeatPort";
  Real resistor1__T_heatPort(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature of HeatPort";
  parameter Real resistor1__R(quantity = "Resistance", unit = "Ohm", start = 1.0) = 10.0 "Resistance at temperature T_ref";
  parameter Real resistor1__T_ref(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) = 300.15 "Reference temperature";
  parameter Real resistor1__alpha(quantity = "LinearTemperatureCoefficient", unit = "1/K") = 0.0 "Temperature coefficient of resistance (R_actual = R*(1 + alpha*(T_heatPort - T_ref))";
  Real resistor1__R_actual(quantity = "Resistance", unit = "Ohm") "Actual resistance = R*(1 + alpha*(T_heatPort - T_ref))";
  parameter Real resistor1__T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) = resistor1__T_ref "Fixed device temperature if useHeatPort = false";
  Real idealdiode1__v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
  Real idealdiode1__i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
  Real idealdiode1__p__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real idealdiode1__p__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real idealdiode1__n__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real idealdiode1__n__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  parameter Boolean idealdiode1__useHeatPort = false "=true, if HeatPort is enabled";
  parameter Real idealdiode1__T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) = 293.15 "Fixed device temperature if useHeatPort = false";
  Real idealdiode1__LossPower(quantity = "Power", unit = "W") "Loss power leaving component via HeatPort";
  Real idealdiode1__T_heatPort(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature of HeatPort";
  parameter Real idealdiode1__Ron(quantity = "Resistance", unit = "Ohm", min = 0.0) = 0.00001 "Forward state-on differential resistance (closed diode resistance)";
  parameter Real idealdiode1__Goff(quantity = "Conductance", unit = "S", min = 0.0) = 0.00001 "Backward state-off conductance (opened diode conductance)";
  parameter Real idealdiode1__Vknee(quantity = "ElectricPotential", unit = "V", min = 0.0, start = 0.0) = 0.0 "Forward threshold voltage";
  Boolean idealdiode1__off(start = true) "Switching state";
  protected Real idealdiode1__s(unit = "1", start = 0.0) "Auxiliary variable for actual position on the ideal diode characteristic";
  protected constant Real idealdiode1__unitVoltage(quantity = "ElectricPotential", unit = "V") = 1.0;
  protected constant Real idealdiode1__unitCurrent(quantity = "ElectricCurrent", unit = "A") = 1.0;
  Real inductor1__v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
  Real inductor1__i(quantity = "ElectricCurrent", unit = "A", start = 0.0) "Current flowing from pin p to pin n";
  Real inductor1__p__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real inductor1__p__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real inductor1__n__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real inductor1__n__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  parameter Real inductor1__L(quantity = "Inductance", unit = "H", start = 1.0) = 0.0001 "Inductance";
  Real idealclosingswitch1__v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
  Real idealclosingswitch1__i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
  Real idealclosingswitch1__p__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real idealclosingswitch1__p__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real idealclosingswitch1__n__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real idealclosingswitch1__n__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  parameter Boolean idealclosingswitch1__useHeatPort = false "=true, if HeatPort is enabled";
  parameter Real idealclosingswitch1__T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) = 293.15 "Fixed device temperature if useHeatPort = false";
  Real idealclosingswitch1__LossPower(quantity = "Power", unit = "W") "Loss power leaving component via HeatPort";
  Real idealclosingswitch1__T_heatPort(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature of HeatPort";
  parameter Real idealclosingswitch1__Ron(quantity = "Resistance", unit = "Ohm", min = 0.0) = 0.00001 "Closed switch resistance";
  parameter Real idealclosingswitch1__Goff(quantity = "Conductance", unit = "S", min = 0.0) = 0.00001 "Opened switch conductance";
  Boolean idealclosingswitch1__control "true => p--n connected, false => switch open";
  protected Real idealclosingswitch1__s(unit = "1") "Auxiliary variable";
  protected constant Real idealclosingswitch1__unitVoltage(quantity = "ElectricPotential", unit = "V") = 1.0;
  protected constant Real idealclosingswitch1__unitCurrent(quantity = "ElectricCurrent", unit = "A") = 1.0;
  Real constantvoltage1__v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
  Real constantvoltage1__i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
  Real constantvoltage1__p__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real constantvoltage1__p__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real constantvoltage1__n__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real constantvoltage1__n__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  parameter Real constantvoltage1__V(quantity = "ElectricPotential", unit = "V", start = 1.0) = 12.0 "Value of constant voltage";
  Boolean booleanpulse1__y "Connector of Boolean output signal";
  parameter Real booleanpulse1__width(min = 1e-60, max = 100.0) = 50.0 "Width of pulse in % of period";
  parameter Real booleanpulse1__period(quantity = "Time", unit = "s", min = 1e-60, start = 1.0) = 0.0001 "Time for one period";
  parameter Real booleanpulse1__startTime(quantity = "Time", unit = "s") = 0.0 "Time instant of first pulse";
  protected discrete Real booleanpulse1__pulsStart(quantity = "Time", unit = "s") "Start time of pulse";
  protected parameter Real booleanpulse1__Twidth(quantity = "Time", unit = "s") = booleanpulse1__period * booleanpulse1__width / 100.0 "width of one pulse";
initial equation
  booleanpulse1__pulsStart = booleanpulse1__startTime;
equation
  ground1__p__v = 0.0;
  capacitor1__i = capacitor1__C * der(capacitor1__v);
  capacitor1__v = capacitor1__p__v - capacitor1__n__v;
  0.0 = capacitor1__p__i + capacitor1__n__i;
  capacitor1__i = capacitor1__p__i;
  resistor1__R_actual = resistor1__R * (1.0 + resistor1__alpha * (resistor1__T_heatPort - resistor1__T_ref));
  resistor1__v = resistor1__R_actual * resistor1__i;
  resistor1__LossPower = resistor1__v * resistor1__i;
  resistor1__v = resistor1__p__v - resistor1__n__v;
  0.0 = resistor1__p__i + resistor1__n__i;
  resistor1__i = resistor1__p__i;
  resistor1__T_heatPort = resistor1__T;
  idealdiode1__off = idealdiode1__s < 0.0;
  idealdiode1__v = idealdiode1__s * (if idealdiode1__off then 1.0 else idealdiode1__Ron) + idealdiode1__Vknee;
  idealdiode1__i = idealdiode1__s * (if idealdiode1__off then idealdiode1__Goff else 1.0) + idealdiode1__Goff * idealdiode1__Vknee;
  idealdiode1__LossPower = idealdiode1__v * idealdiode1__i;
  idealdiode1__v = idealdiode1__p__v - idealdiode1__n__v;
  0.0 = idealdiode1__p__i + idealdiode1__n__i;
  idealdiode1__i = idealdiode1__p__i;
  idealdiode1__T_heatPort = idealdiode1__T;
  inductor1__L * der(inductor1__i) = inductor1__v;
  inductor1__v = inductor1__p__v - inductor1__n__v;
  0.0 = inductor1__p__i + inductor1__n__i;
  inductor1__i = inductor1__p__i;
  idealclosingswitch1__v = idealclosingswitch1__s * (if idealclosingswitch1__control then idealclosingswitch1__Ron else 1.0);
  idealclosingswitch1__i = idealclosingswitch1__s * (if idealclosingswitch1__control then 1.0 else idealclosingswitch1__Goff);
  idealclosingswitch1__LossPower = idealclosingswitch1__v * idealclosingswitch1__i;
  idealclosingswitch1__v = idealclosingswitch1__p__v - idealclosingswitch1__n__v;
  0.0 = idealclosingswitch1__p__i + idealclosingswitch1__n__i;
  idealclosingswitch1__i = idealclosingswitch1__p__i;
  idealclosingswitch1__T_heatPort = idealclosingswitch1__T;
  constantvoltage1__v = constantvoltage1__V;
  constantvoltage1__v = constantvoltage1__p__v - constantvoltage1__n__v;
  0.0 = constantvoltage1__p__i + constantvoltage1__n__i;
  constantvoltage1__i = constantvoltage1__p__i;
  when sample(booleanpulse1__startTime, booleanpulse1__period) then
  booleanpulse1__pulsStart = time;
  end when;
  booleanpulse1__y = time >= booleanpulse1__pulsStart and time < booleanpulse1__pulsStart + booleanpulse1__Twidth;
  ground1__p__i + capacitor1__n__i + resistor1__n__i + idealdiode1__p__i + constantvoltage1__n__i = 0.0;
  capacitor1__p__i + resistor1__p__i + inductor1__n__i = 0.0;
  idealdiode1__n__i + inductor1__p__i + idealclosingswitch1__n__i = 0.0;
  idealclosingswitch1__p__i + constantvoltage1__p__i = 0.0;
  booleanpulse1__y = idealclosingswitch1__control;
  capacitor1__n__v = constantvoltage1__n__v;
  capacitor1__n__v = ground1__p__v;
  capacitor1__n__v = idealdiode1__p__v;
  capacitor1__n__v = resistor1__n__v;
  idealclosingswitch1__n__v = idealdiode1__n__v;
  idealclosingswitch1__n__v = inductor1__p__v;
  constantvoltage1__p__v = idealclosingswitch1__p__v;
  capacitor1__p__v = inductor1__n__v;
  capacitor1__p__v = resistor1__p__v;
end buck;
