class Modelica__Electrical__Analog__Examples__Rectifier "B6 diode bridge"
  parameter Real VAC(quantity = "ElectricPotential", unit = "V") = 400.0 "RMS line-to-line";
  parameter Real f(quantity = "Frequency", unit = "Hz") = 50.0 "line frequency";
  parameter Real LAC(quantity = "Inductance", unit = "H") = 0.00006 "line inductor";
  parameter Real Ron(quantity = "Resistance", unit = "Ohm") = 0.001 "diode forward resistance";
  parameter Real Goff(quantity = "Conductance", unit = "S") = 0.001 "diode backward conductance";
  parameter Real Vknee(quantity = "ElectricPotential", unit = "V") = 2.0 "diode threshold voltage";
  parameter Real CDC(quantity = "Capacitance", unit = "F", min = 0.0) = 0.015 "DC capacitance";
  parameter Real IDC(quantity = "ElectricCurrent", unit = "A") = 500.0 "load current";
  Real uDC(quantity = "ElectricPotential", unit = "V");
  /*Real iAC_L1_R(quantity = "ElectricCurrent", unit = "A");
  Real iAC_L2_R(quantity = "ElectricCurrent", unit = "A");
  Real iAC_L3_R(quantity = "ElectricCurrent", unit = "A");
  Real uAC_L1_R(quantity = "ElectricPotential", unit = "V");
  Real uAC_L2_R(quantity = "ElectricPotential", unit = "V");
  Real uAC_L3_R(quantity = "ElectricPotential", unit = "V");*/
  Real Losses(quantity = "Power", unit = "W");
  Real Ground1__p__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real Ground1__p__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real SignalCurrent1__p__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real SignalCurrent1__p__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real SignalCurrent1__n__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real SignalCurrent1__n__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real SignalCurrent1__v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
  Real SignalCurrent1__i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n as input signal";
  Real SineVoltage1__v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
  Real SineVoltage1__i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
  Real SineVoltage1__p__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real SineVoltage1__p__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real SineVoltage1__n__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real SineVoltage1__n__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  parameter Real SineVoltage1__offset(quantity = "ElectricPotential", unit = "V") = 0.0 "Voltage offset";
  parameter Real SineVoltage1__startTime(quantity = "Time", unit = "s") = 0.0 "Time offset";
  parameter Real SineVoltage1__V(quantity = "ElectricPotential", unit = "V", start = 1.0) = 0.816496580927726 * VAC "Amplitude of sine wave";
  parameter Real SineVoltage1__phase(quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Phase of sine wave";
  parameter Real SineVoltage1__freqHz(quantity = "Frequency", unit = "Hz", start = 1.0) = f "Frequency of sine wave";
  Real SineVoltage1__signalSource__y "Connector of Real output signal";
  parameter Real SineVoltage1__signalSource__amplitude = SineVoltage1__V "Amplitude of sine wave";
  parameter Real SineVoltage1__signalSource__freqHz(quantity = "Frequency", unit = "Hz", start = 1.0) = SineVoltage1__freqHz "Frequency of sine wave";
  parameter Real SineVoltage1__signalSource__phase(quantity = "Angle", unit = "rad", displayUnit = "deg") = SineVoltage1__phase "Phase of sine wave";
  parameter Real SineVoltage1__signalSource__offset = SineVoltage1__offset "Offset of output signal";
  parameter Real SineVoltage1__signalSource__startTime(quantity = "Time", unit = "s") = SineVoltage1__startTime "Output = offset for time < startTime";
  protected constant Real SineVoltage1__signalSource__pi = 3.141592653589793;
  Real SineVoltage2__v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
  Real SineVoltage2__i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
  Real SineVoltage2__p__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real SineVoltage2__p__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real SineVoltage2__n__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real SineVoltage2__n__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  parameter Real SineVoltage2__offset(quantity = "ElectricPotential", unit = "V") = 0.0 "Voltage offset";
  parameter Real SineVoltage2__startTime(quantity = "Time", unit = "s") = 0.0 "Time offset";
  parameter Real SineVoltage2__V(quantity = "ElectricPotential", unit = "V", start = 1.0) = 0.816496580927726 * VAC "Amplitude of sine wave";
  parameter Real SineVoltage2__phase(quantity = "Angle", unit = "rad", displayUnit = "deg") = -2.0943951023931953 "Phase of sine wave";
  parameter Real SineVoltage2__freqHz(quantity = "Frequency", unit = "Hz", start = 1.0) = f "Frequency of sine wave";
  Real SineVoltage2__signalSource__y "Connector of Real output signal";
  parameter Real SineVoltage2__signalSource__amplitude = SineVoltage2__V "Amplitude of sine wave";
  parameter Real SineVoltage2__signalSource__freqHz(quantity = "Frequency", unit = "Hz", start = 1.0) = SineVoltage2__freqHz "Frequency of sine wave";
  parameter Real SineVoltage2__signalSource__phase(quantity = "Angle", unit = "rad", displayUnit = "deg") = SineVoltage2__phase "Phase of sine wave";
  parameter Real SineVoltage2__signalSource__offset = SineVoltage2__offset "Offset of output signal";
  parameter Real SineVoltage2__signalSource__startTime(quantity = "Time", unit = "s") = SineVoltage2__startTime "Output = offset for time < startTime";
  protected constant Real SineVoltage2__signalSource__pi = 3.141592653589793;
  Real SineVoltage3__v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
  Real SineVoltage3__i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
  Real SineVoltage3__p__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real SineVoltage3__p__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real SineVoltage3__n__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real SineVoltage3__n__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  parameter Real SineVoltage3__offset(quantity = "ElectricPotential", unit = "V") = 0.0 "Voltage offset";
  parameter Real SineVoltage3__startTime(quantity = "Time", unit = "s") = 0.0 "Time offset";
  parameter Real SineVoltage3__V(quantity = "ElectricPotential", unit = "V", start = 1.0) = 0.816496580927726 * VAC "Amplitude of sine wave";
  parameter Real SineVoltage3__phase(quantity = "Angle", unit = "rad", displayUnit = "deg") = -4.1887902047863905 "Phase of sine wave";
  parameter Real SineVoltage3__freqHz(quantity = "Frequency", unit = "Hz", start = 1.0) = f "Frequency of sine wave";
  Real SineVoltage3__signalSource__y "Connector of Real output signal";
  parameter Real SineVoltage3__signalSource__amplitude = SineVoltage3__V "Amplitude of sine wave";
  parameter Real SineVoltage3__signalSource__freqHz(quantity = "Frequency", unit = "Hz", start = 1.0) = SineVoltage3__freqHz "Frequency of sine wave";
  parameter Real SineVoltage3__signalSource__phase(quantity = "Angle", unit = "rad", displayUnit = "deg") = SineVoltage3__phase "Phase of sine wave";
  parameter Real SineVoltage3__signalSource__offset = SineVoltage3__offset "Offset of output signal";
  parameter Real SineVoltage3__signalSource__startTime(quantity = "Time", unit = "s") = SineVoltage3__startTime "Output = offset for time < startTime";
  protected constant Real SineVoltage3__signalSource__pi = 3.141592653589793;
  Real Inductor1__v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
  Real Inductor1__i(quantity = "ElectricCurrent", unit = "A", start = 0.0) "Current flowing from pin p to pin n";
  Real Inductor1__p__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real Inductor1__p__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real Inductor1__n__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real Inductor1__n__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  parameter Real Inductor1__L(quantity = "Inductance", unit = "H", start = 1.0) = LAC "Inductance";
  Real Inductor2__v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
  Real Inductor2__i(quantity = "ElectricCurrent", unit = "A", start = 0.0, fixed = true) "Current flowing from pin p to pin n";
  Real Inductor2__p__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real Inductor2__p__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real Inductor2__n__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real Inductor2__n__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  parameter Real Inductor2__L(quantity = "Inductance", unit = "H", start = 1.0) = LAC "Inductance";
  Real Inductor3__v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
  Real Inductor3__i(quantity = "ElectricCurrent", unit = "A", start = 0.0, fixed = true) "Current flowing from pin p to pin n";
  Real Inductor3__p__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real Inductor3__p__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real Inductor3__n__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real Inductor3__n__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  parameter Real Inductor3__L(quantity = "Inductance", unit = "H", start = 1.0) = LAC "Inductance";
  Real IdealDiode1__v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
  Real IdealDiode1__i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
  Real IdealDiode1__p__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real IdealDiode1__p__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real IdealDiode1__n__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real IdealDiode1__n__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  parameter Boolean IdealDiode1__useHeatPort = false "=true, if HeatPort is enabled";
  parameter Real IdealDiode1__T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) = 293.15 "Fixed device temperature if useHeatPort = false";
  Real IdealDiode1__LossPower(quantity = "Power", unit = "W") "Loss power leaving component via HeatPort";
  Real IdealDiode1__T_heatPort(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature of HeatPort";
  parameter Real IdealDiode1__Ron(quantity = "Resistance", unit = "Ohm", min = 0.0) = Ron "Forward state-on differential resistance (closed diode resistance)";
  parameter Real IdealDiode1__Goff(quantity = "Conductance", unit = "S", min = 0.0) = Goff "Backward state-off conductance (opened diode conductance)";
  parameter Real IdealDiode1__Vknee(quantity = "ElectricPotential", unit = "V", min = 0.0, start = 0.0) = Vknee "Forward threshold voltage";
  Boolean IdealDiode1__off(start = true) "Switching state";
  protected Real IdealDiode1__s(unit = "1", start = 0.0) "Auxiliary variable for actual position on the ideal diode characteristic";
  protected constant Real IdealDiode1__unitVoltage(quantity = "ElectricPotential", unit = "V") = 1.0;
  protected constant Real IdealDiode1__unitCurrent(quantity = "ElectricCurrent", unit = "A") = 1.0;
  Real IdealDiode2__v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
  Real IdealDiode2__i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
  Real IdealDiode2__p__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real IdealDiode2__p__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real IdealDiode2__n__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real IdealDiode2__n__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  parameter Boolean IdealDiode2__useHeatPort = false "=true, if HeatPort is enabled";
  parameter Real IdealDiode2__T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) = 293.15 "Fixed device temperature if useHeatPort = false";
  Real IdealDiode2__LossPower(quantity = "Power", unit = "W") "Loss power leaving component via HeatPort";
  Real IdealDiode2__T_heatPort(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature of HeatPort";
  parameter Real IdealDiode2__Ron(quantity = "Resistance", unit = "Ohm", min = 0.0) = Ron "Forward state-on differential resistance (closed diode resistance)";
  parameter Real IdealDiode2__Goff(quantity = "Conductance", unit = "S", min = 0.0) = Goff "Backward state-off conductance (opened diode conductance)";
  parameter Real IdealDiode2__Vknee(quantity = "ElectricPotential", unit = "V", min = 0.0, start = 0.0) = Vknee "Forward threshold voltage";
  Boolean IdealDiode2__off(start = true) "Switching state";
  protected Real IdealDiode2__s(unit = "1", start = 0.0) "Auxiliary variable for actual position on the ideal diode characteristic";
  protected constant Real IdealDiode2__unitVoltage(quantity = "ElectricPotential", unit = "V") = 1.0;
  protected constant Real IdealDiode2__unitCurrent(quantity = "ElectricCurrent", unit = "A") = 1.0;
  Real IdealDiode3__v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
  Real IdealDiode3__i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
  Real IdealDiode3__p__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real IdealDiode3__p__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real IdealDiode3__n__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real IdealDiode3__n__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  parameter Boolean IdealDiode3__useHeatPort = false "=true, if HeatPort is enabled";
  parameter Real IdealDiode3__T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) = 293.15 "Fixed device temperature if useHeatPort = false";
  Real IdealDiode3__LossPower(quantity = "Power", unit = "W") "Loss power leaving component via HeatPort";
  Real IdealDiode3__T_heatPort(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature of HeatPort";
  parameter Real IdealDiode3__Ron(quantity = "Resistance", unit = "Ohm", min = 0.0) = Ron "Forward state-on differential resistance (closed diode resistance)";
  parameter Real IdealDiode3__Goff(quantity = "Conductance", unit = "S", min = 0.0) = Goff "Backward state-off conductance (opened diode conductance)";
  parameter Real IdealDiode3__Vknee(quantity = "ElectricPotential", unit = "V", min = 0.0, start = 0.0) = Vknee "Forward threshold voltage";
  Boolean IdealDiode3__off(start = true) "Switching state";
  protected Real IdealDiode3__s(unit = "1", start = 0.0) "Auxiliary variable for actual position on the ideal diode characteristic";
  protected constant Real IdealDiode3__unitVoltage(quantity = "ElectricPotential", unit = "V") = 1.0;
  protected constant Real IdealDiode3__unitCurrent(quantity = "ElectricCurrent", unit = "A") = 1.0;
  Real IdealDiode4__v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
  Real IdealDiode4__i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
  Real IdealDiode4__p__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real IdealDiode4__p__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real IdealDiode4__n__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real IdealDiode4__n__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  parameter Boolean IdealDiode4__useHeatPort = false "=true, if HeatPort is enabled";
  parameter Real IdealDiode4__T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) = 293.15 "Fixed device temperature if useHeatPort = false";
  Real IdealDiode4__LossPower(quantity = "Power", unit = "W") "Loss power leaving component via HeatPort";
  Real IdealDiode4__T_heatPort(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature of HeatPort";
  parameter Real IdealDiode4__Ron(quantity = "Resistance", unit = "Ohm", min = 0.0) = Ron "Forward state-on differential resistance (closed diode resistance)";
  parameter Real IdealDiode4__Goff(quantity = "Conductance", unit = "S", min = 0.0) = Goff "Backward state-off conductance (opened diode conductance)";
  parameter Real IdealDiode4__Vknee(quantity = "ElectricPotential", unit = "V", min = 0.0, start = 0.0) = Vknee "Forward threshold voltage";
  Boolean IdealDiode4__off(start = true) "Switching state";
  protected Real IdealDiode4__s(unit = "1", start = 0.0) "Auxiliary variable for actual position on the ideal diode characteristic";
  protected constant Real IdealDiode4__unitVoltage(quantity = "ElectricPotential", unit = "V") = 1.0;
  protected constant Real IdealDiode4__unitCurrent(quantity = "ElectricCurrent", unit = "A") = 1.0;
  Real IdealDiode5__v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
  Real IdealDiode5__i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
  Real IdealDiode5__p__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real IdealDiode5__p__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real IdealDiode5__n__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real IdealDiode5__n__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  parameter Boolean IdealDiode5__useHeatPort = false "=true, if HeatPort is enabled";
  parameter Real IdealDiode5__T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) = 293.15 "Fixed device temperature if useHeatPort = false";
  Real IdealDiode5__LossPower(quantity = "Power", unit = "W") "Loss power leaving component via HeatPort";
  Real IdealDiode5__T_heatPort(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature of HeatPort";
  parameter Real IdealDiode5__Ron(quantity = "Resistance", unit = "Ohm", min = 0.0) = Ron "Forward state-on differential resistance (closed diode resistance)";
  parameter Real IdealDiode5__Goff(quantity = "Conductance", unit = "S", min = 0.0) = Goff "Backward state-off conductance (opened diode conductance)";
  parameter Real IdealDiode5__Vknee(quantity = "ElectricPotential", unit = "V", min = 0.0, start = 0.0) = Vknee "Forward threshold voltage";
  Boolean IdealDiode5__off(start = true) "Switching state";
  protected Real IdealDiode5__s(unit = "1", start = 0.0) "Auxiliary variable for actual position on the ideal diode characteristic";
  protected constant Real IdealDiode5__unitVoltage(quantity = "ElectricPotential", unit = "V") = 1.0;
  protected constant Real IdealDiode5__unitCurrent(quantity = "ElectricCurrent", unit = "A") = 1.0;
  Real IdealDiode6__v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
  Real IdealDiode6__i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
  Real IdealDiode6__p__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real IdealDiode6__p__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real IdealDiode6__n__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real IdealDiode6__n__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  parameter Boolean IdealDiode6__useHeatPort = false "=true, if HeatPort is enabled";
  parameter Real IdealDiode6__T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) = 293.15 "Fixed device temperature if useHeatPort = false";
  Real IdealDiode6__LossPower(quantity = "Power", unit = "W") "Loss power leaving component via HeatPort";
  Real IdealDiode6__T_heatPort(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature of HeatPort";
  parameter Real IdealDiode6__Ron(quantity = "Resistance", unit = "Ohm", min = 0.0) = Ron "Forward state-on differential resistance (closed diode resistance)";
  parameter Real IdealDiode6__Goff(quantity = "Conductance", unit = "S", min = 0.0) = Goff "Backward state-off conductance (opened diode conductance)";
  parameter Real IdealDiode6__Vknee(quantity = "ElectricPotential", unit = "V", min = 0.0, start = 0.0) = Vknee "Forward threshold voltage";
  Boolean IdealDiode6__off(start = true) "Switching state";
  protected Real IdealDiode6__s(unit = "1", start = 0.0) "Auxiliary variable for actual position on the ideal diode characteristic";
  protected constant Real IdealDiode6__unitVoltage(quantity = "ElectricPotential", unit = "V") = 1.0;
  protected constant Real IdealDiode6__unitCurrent(quantity = "ElectricCurrent", unit = "A") = 1.0;
  Real Capacitor1__v(quantity = "ElectricPotential", unit = "V", start = 0.0) "Voltage drop between the two pins (= p.v - n.v)";
  Real Capacitor1__i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
  Real Capacitor1__p__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real Capacitor1__p__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real Capacitor1__n__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real Capacitor1__n__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  parameter Real Capacitor1__C(quantity = "Capacitance", unit = "F", min = 0.0, start = 1.0) = 2.0 * CDC "Capacitance";
  Real Capacitor2__v(quantity = "ElectricPotential", unit = "V", start = 0.0) "Voltage drop between the two pins (= p.v - n.v)";
  Real Capacitor2__i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
  Real Capacitor2__p__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real Capacitor2__p__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real Capacitor2__n__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real Capacitor2__n__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  parameter Real Capacitor2__C(quantity = "Capacitance", unit = "F", min = 0.0, start = 1.0) = 2.0 * CDC "Capacitance";
  Real Constant1__y "Connector of Real output signal";
  parameter Real Constant1__k(start = 1.0) = IDC "Constant output value";
initial equation
  Capacitor1__v = 0.7071067811865476 * VAC;
  Capacitor2__v = 0.7071067811865476 * VAC;
equation
  Ground1__p__v = 0.0;
  SignalCurrent1__v = SignalCurrent1__p__v - SignalCurrent1__n__v;
  0.0 = SignalCurrent1__p__i + SignalCurrent1__n__i;
  SignalCurrent1__i = SignalCurrent1__p__i;
  SineVoltage1__signalSource__y = SineVoltage1__signalSource__offset + (if time < SineVoltage1__signalSource__startTime then 0.0 else SineVoltage1__signalSource__amplitude * sin(6.283185307179586 * SineVoltage1__signalSource__freqHz * (time - SineVoltage1__signalSource__startTime) + SineVoltage1__signalSource__phase));
  SineVoltage1__v = SineVoltage1__signalSource__y;
  SineVoltage1__v = SineVoltage1__p__v - SineVoltage1__n__v;
  0.0 = SineVoltage1__p__i + SineVoltage1__n__i;
  SineVoltage1__i = SineVoltage1__p__i;
  SineVoltage2__signalSource__y = SineVoltage2__signalSource__offset + (if time < SineVoltage2__signalSource__startTime then 0.0 else SineVoltage2__signalSource__amplitude * sin(6.283185307179586 * SineVoltage2__signalSource__freqHz * (time - SineVoltage2__signalSource__startTime) + SineVoltage2__signalSource__phase));
  SineVoltage2__v = SineVoltage2__signalSource__y;
  SineVoltage2__v = SineVoltage2__p__v - SineVoltage2__n__v;
  0.0 = SineVoltage2__p__i + SineVoltage2__n__i;
  SineVoltage2__i = SineVoltage2__p__i;
  SineVoltage3__signalSource__y = SineVoltage3__signalSource__offset + (if time < SineVoltage3__signalSource__startTime then 0.0 else SineVoltage3__signalSource__amplitude * sin(6.283185307179586 * SineVoltage3__signalSource__freqHz * (time - SineVoltage3__signalSource__startTime) + SineVoltage3__signalSource__phase));
  SineVoltage3__v = SineVoltage3__signalSource__y;
  SineVoltage3__v = SineVoltage3__p__v - SineVoltage3__n__v;
  0.0 = SineVoltage3__p__i + SineVoltage3__n__i;
  SineVoltage3__i = SineVoltage3__p__i;
  Inductor1__L * der(Inductor1__i) = Inductor1__v;
  Inductor1__v = Inductor1__p__v - Inductor1__n__v;
  0.0 = Inductor1__p__i + Inductor1__n__i;
  Inductor1__i = Inductor1__p__i;
  Inductor2__L * der(Inductor2__i) = Inductor2__v;
  Inductor2__v = Inductor2__p__v - Inductor2__n__v;
  0.0 = Inductor2__p__i + Inductor2__n__i;
  Inductor2__i = Inductor2__p__i;
  Inductor3__L * der(Inductor3__i) = Inductor3__v;
  Inductor3__v = Inductor3__p__v - Inductor3__n__v;
  0.0 = Inductor3__p__i + Inductor3__n__i;
  Inductor3__i = Inductor3__p__i;
  IdealDiode1__off = IdealDiode1__s < 0.0;
  IdealDiode1__v = IdealDiode1__s * (if IdealDiode1__off then 1.0 else IdealDiode1__Ron) + IdealDiode1__Vknee;
  IdealDiode1__i = IdealDiode1__s * (if IdealDiode1__off then IdealDiode1__Goff else 1.0) + IdealDiode1__Goff * IdealDiode1__Vknee;
  IdealDiode1__LossPower = IdealDiode1__v * IdealDiode1__i;
  IdealDiode1__v = IdealDiode1__p__v - IdealDiode1__n__v;
  0.0 = IdealDiode1__p__i + IdealDiode1__n__i;
  IdealDiode1__i = IdealDiode1__p__i;
  IdealDiode1__T_heatPort = IdealDiode1__T;
  IdealDiode2__off = IdealDiode2__s < 0.0;
  IdealDiode2__v = IdealDiode2__s * (if IdealDiode2__off then 1.0 else IdealDiode2__Ron) + IdealDiode2__Vknee;
  IdealDiode2__i = IdealDiode2__s * (if IdealDiode2__off then IdealDiode2__Goff else 1.0) + IdealDiode2__Goff * IdealDiode2__Vknee;
  IdealDiode2__LossPower = IdealDiode2__v * IdealDiode2__i;
  IdealDiode2__v = IdealDiode2__p__v - IdealDiode2__n__v;
  0.0 = IdealDiode2__p__i + IdealDiode2__n__i;
  IdealDiode2__i = IdealDiode2__p__i;
  IdealDiode2__T_heatPort = IdealDiode2__T;
  IdealDiode3__off = IdealDiode3__s < 0.0;
  IdealDiode3__v = IdealDiode3__s * (if IdealDiode3__off then 1.0 else IdealDiode3__Ron) + IdealDiode3__Vknee;
  IdealDiode3__i = IdealDiode3__s * (if IdealDiode3__off then IdealDiode3__Goff else 1.0) + IdealDiode3__Goff * IdealDiode3__Vknee;
  IdealDiode3__LossPower = IdealDiode3__v * IdealDiode3__i;
  IdealDiode3__v = IdealDiode3__p__v - IdealDiode3__n__v;
  0.0 = IdealDiode3__p__i + IdealDiode3__n__i;
  IdealDiode3__i = IdealDiode3__p__i;
  IdealDiode3__T_heatPort = IdealDiode3__T;
  IdealDiode4__off = IdealDiode4__s < 0.0;
  IdealDiode4__v = IdealDiode4__s * (if IdealDiode4__off then 1.0 else IdealDiode4__Ron) + IdealDiode4__Vknee;
  IdealDiode4__i = IdealDiode4__s * (if IdealDiode4__off then IdealDiode4__Goff else 1.0) + IdealDiode4__Goff * IdealDiode4__Vknee;
  IdealDiode4__LossPower = IdealDiode4__v * IdealDiode4__i;
  IdealDiode4__v = IdealDiode4__p__v - IdealDiode4__n__v;
  0.0 = IdealDiode4__p__i + IdealDiode4__n__i;
  IdealDiode4__i = IdealDiode4__p__i;
  IdealDiode4__T_heatPort = IdealDiode4__T;
  IdealDiode5__off = IdealDiode5__s < 0.0;
  IdealDiode5__v = IdealDiode5__s * (if IdealDiode5__off then 1.0 else IdealDiode5__Ron) + IdealDiode5__Vknee;
  IdealDiode5__i = IdealDiode5__s * (if IdealDiode5__off then IdealDiode5__Goff else 1.0) + IdealDiode5__Goff * IdealDiode5__Vknee;
  IdealDiode5__LossPower = IdealDiode5__v * IdealDiode5__i;
  IdealDiode5__v = IdealDiode5__p__v - IdealDiode5__n__v;
  0.0 = IdealDiode5__p__i + IdealDiode5__n__i;
  IdealDiode5__i = IdealDiode5__p__i;
  IdealDiode5__T_heatPort = IdealDiode5__T;
  IdealDiode6__off = IdealDiode6__s < 0.0;
  IdealDiode6__v = IdealDiode6__s * (if IdealDiode6__off then 1.0 else IdealDiode6__Ron) + IdealDiode6__Vknee;
  IdealDiode6__i = IdealDiode6__s * (if IdealDiode6__off then IdealDiode6__Goff else 1.0) + IdealDiode6__Goff * IdealDiode6__Vknee;
  IdealDiode6__LossPower = IdealDiode6__v * IdealDiode6__i;
  IdealDiode6__v = IdealDiode6__p__v - IdealDiode6__n__v;
  0.0 = IdealDiode6__p__i + IdealDiode6__n__i;
  IdealDiode6__i = IdealDiode6__p__i;
  IdealDiode6__T_heatPort = IdealDiode6__T;
  Capacitor1__i = Capacitor1__C * der(Capacitor1__v);
  Capacitor1__v = Capacitor1__p__v - Capacitor1__n__v;
  0.0 = Capacitor1__p__i + Capacitor1__n__i;
  Capacitor1__i = Capacitor1__p__i;
  Capacitor2__i = Capacitor2__C * der(Capacitor2__v);
  Capacitor2__v = Capacitor2__p__v - Capacitor2__n__v;
  0.0 = Capacitor2__p__i + Capacitor2__n__i;
  Capacitor2__i = Capacitor2__p__i;
  Constant1__y = Constant1__k;
  uDC = Capacitor1__v + Capacitor2__v;
  /*iAC[1] = Inductor1__i;
  iAC[2] = Inductor2__i;
  iAC[3] = Inductor3__i;
  uAC[1] = Inductor1__n__v - Inductor2__n__v;
  uAC[2] = Inductor2__n__v - Inductor3__n__v;
  uAC[3] = Inductor3__n__v - Inductor1__n__v;*/
  Losses = IdealDiode1__v * IdealDiode1__i + IdealDiode2__v * IdealDiode2__i + IdealDiode3__v * IdealDiode3__i + IdealDiode4__v * IdealDiode4__i + IdealDiode5__v * IdealDiode5__i + IdealDiode6__v * IdealDiode6__i;
  Ground1__p__i + Capacitor1__n__i + Capacitor2__p__i = 0.0;
  SignalCurrent1__p__i + IdealDiode1__n__i + IdealDiode2__n__i + IdealDiode3__n__i + Capacitor1__p__i = 0.0;
  SignalCurrent1__n__i + IdealDiode4__p__i + IdealDiode5__p__i + IdealDiode6__p__i + Capacitor2__n__i = 0.0;
  SineVoltage1__p__i + Inductor1__p__i = 0.0;
  SineVoltage1__n__i + SineVoltage2__n__i + SineVoltage3__n__i = 0.0;
  SineVoltage2__p__i + Inductor2__p__i = 0.0;
  SineVoltage3__p__i + Inductor3__p__i = 0.0;
  Inductor1__n__i + IdealDiode1__p__i + IdealDiode4__n__i = 0.0;
  Inductor2__n__i + IdealDiode2__p__i + IdealDiode5__n__i = 0.0;
  Inductor3__n__i + IdealDiode3__p__i + IdealDiode6__n__i = 0.0;
  SineVoltage1__n__v = SineVoltage2__n__v;
  SineVoltage1__n__v = SineVoltage3__n__v;
  Inductor1__p__v = SineVoltage1__p__v;
  Inductor2__p__v = SineVoltage2__p__v;
  Inductor3__p__v = SineVoltage3__p__v;
  IdealDiode1__p__v = IdealDiode4__n__v;
  IdealDiode1__p__v = Inductor1__n__v;
  IdealDiode2__p__v = IdealDiode5__n__v;
  IdealDiode2__p__v = Inductor2__n__v;
  IdealDiode3__p__v = IdealDiode6__n__v;
  IdealDiode3__p__v = Inductor3__n__v;
  Capacitor1__p__v = IdealDiode1__n__v;
  Capacitor1__p__v = IdealDiode2__n__v;
  Capacitor1__p__v = IdealDiode3__n__v;
  Capacitor1__p__v = SignalCurrent1__p__v;
  Capacitor2__n__v = IdealDiode4__p__v;
  Capacitor2__n__v = IdealDiode5__p__v;
  Capacitor2__n__v = IdealDiode6__p__v;
  Capacitor2__n__v = SignalCurrent1__n__v;
  Capacitor1__n__v = Capacitor2__p__v;
  Capacitor1__n__v = Ground1__p__v;
  Constant1__y = SignalCurrent1__i;
end Modelica__Electrical__Analog__Examples__Rectifier;
