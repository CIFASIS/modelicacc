class Modelica__Electrical__Analog__Examples__SwitchWithArc "Comparison of switch models both with and without arc"
  Boolean booleanPulse__y "Connector of Boolean output signal";
  parameter Real booleanPulse__width(min = 1e-60, max = 100.0) = 50.0 "Width of pulse in % of period";
  parameter Real booleanPulse__period(quantity = "Time", unit = "s", min = 1e-60, start = 1.0) = 1.0 "Time for one period";
  parameter Real booleanPulse__startTime(quantity = "Time", unit = "s") = 0.0 "Time instant of first pulse";
  protected discrete Real booleanPulse__pulsStart(quantity = "Time", unit = "s") "Start time of pulse";
  protected parameter Real booleanPulse__Twidth(quantity = "Time", unit = "s") = booleanPulse__period * booleanPulse__width / 100.0 "width of one pulse";
  Real ground1__p__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real ground1__p__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real constantVoltage1__v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
  Real constantVoltage1__i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
  Real constantVoltage1__p__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real constantVoltage1__p__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real constantVoltage1__n__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real constantVoltage1__n__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  parameter Real constantVoltage1__V(quantity = "ElectricPotential", unit = "V", start = 1.0) = 50.0 "Value of constant voltage";
  Real inductor1__v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
  Real inductor1__i(quantity = "ElectricCurrent", unit = "A", start = 0.0, fixed = true) "Current flowing from pin p to pin n";
  Real inductor1__p__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real inductor1__p__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real inductor1__n__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real inductor1__n__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  parameter Real inductor1__L(quantity = "Inductance", unit = "H", start = 1.0) = 0.1 "Inductance";
  Real resistor1__v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
  Real resistor1__i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
  Real resistor1__p__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real resistor1__p__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real resistor1__n__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real resistor1__n__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  parameter Boolean resistor1__useHeatPort = false "=true, if HeatPort is enabled";
  parameter Real resistor1__T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) = resistor1__T_ref "Fixed device temperature if useHeatPort = false";
  Real resistor1__LossPower(quantity = "Power", unit = "W") "Loss power leaving component via HeatPort";
  Real resistor1__T_heatPort(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature of HeatPort";
  parameter Real resistor1__R(quantity = "Resistance", unit = "Ohm", start = 1.0) = 1.0 "Resistance at temperature T_ref";
  parameter Real resistor1__T_ref(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) = 300.15 "Reference temperature";
  parameter Real resistor1__alpha(quantity = "LinearTemperatureCoefficient", unit = "1/K") = 0.0 "Temperature coefficient of resistance (R_actual = R*(1 + alpha*(T_heatPort - T_ref))";
  Real resistor1__R_actual(quantity = "Resistance", unit = "Ohm") "Actual resistance = R*(1 + alpha*(T_heatPort - T_ref))";
  Real switch1__v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
  Real switch1__i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
  Real switch1__p__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real switch1__p__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real switch1__n__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real switch1__n__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  parameter Boolean switch1__useHeatPort = false "=true, if HeatPort is enabled";
  parameter Real switch1__T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) = 293.15 "Fixed device temperature if useHeatPort = false";
  Real switch1__LossPower(quantity = "Power", unit = "W") "Loss power leaving component via HeatPort";
  Real switch1__T_heatPort(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature of HeatPort";
  parameter Real switch1__Ron(quantity = "Resistance", unit = "Ohm", min = 0.0) = 0.00001 "Closed switch resistance";
  parameter Real switch1__Goff(quantity = "Conductance", unit = "S", min = 0.0) = 0.00001 "Opened switch conductance";
  Boolean switch1__control "true => p--n connected, false => switch open";
  protected Real switch1__s(unit = "1") "Auxiliary variable";
  protected constant Real switch1__unitVoltage(quantity = "ElectricPotential", unit = "V") = 1.0;
  protected constant Real switch1__unitCurrent(quantity = "ElectricCurrent", unit = "A") = 1.0;
  Real ground2__p__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real ground2__p__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real constantVoltage2__v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
  Real constantVoltage2__i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
  Real constantVoltage2__p__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real constantVoltage2__p__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real constantVoltage2__n__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real constantVoltage2__n__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  parameter Real constantVoltage2__V(quantity = "ElectricPotential", unit = "V", start = 1.0) = 50.0 "Value of constant voltage";
  Real inductor2__v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
  Real inductor2__i(quantity = "ElectricCurrent", unit = "A", start = 0.0, fixed = true) "Current flowing from pin p to pin n";
  Real inductor2__p__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real inductor2__p__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real inductor2__n__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real inductor2__n__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  parameter Real inductor2__L(quantity = "Inductance", unit = "H", start = 1.0) = 0.1 "Inductance";
  Real resistor2__v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
  Real resistor2__i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
  Real resistor2__p__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real resistor2__p__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real resistor2__n__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real resistor2__n__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  parameter Boolean resistor2__useHeatPort = false "=true, if HeatPort is enabled";
  parameter Real resistor2__T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) = resistor2__T_ref "Fixed device temperature if useHeatPort = false";
  Real resistor2__LossPower(quantity = "Power", unit = "W") "Loss power leaving component via HeatPort";
  Real resistor2__T_heatPort(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature of HeatPort";
  parameter Real resistor2__R(quantity = "Resistance", unit = "Ohm", start = 1.0) = 1.0 "Resistance at temperature T_ref";
  parameter Real resistor2__T_ref(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) = 300.15 "Reference temperature";
  parameter Real resistor2__alpha(quantity = "LinearTemperatureCoefficient", unit = "1/K") = 0.0 "Temperature coefficient of resistance (R_actual = R*(1 + alpha*(T_heatPort - T_ref))";
  Real resistor2__R_actual(quantity = "Resistance", unit = "Ohm") "Actual resistance = R*(1 + alpha*(T_heatPort - T_ref))";
  Real switch2__v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
  Real switch2__i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
  Real switch2__p__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real switch2__p__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real switch2__n__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real switch2__n__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  parameter Boolean switch2__useHeatPort = false "=true, if HeatPort is enabled";
  parameter Real switch2__T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) = 293.15 "Fixed device temperature if useHeatPort = false";
  Real switch2__LossPower(quantity = "Power", unit = "W") "Loss power leaving component via HeatPort";
  Real switch2__T_heatPort(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature of HeatPort";
  parameter Real switch2__Ron(quantity = "Resistance", unit = "Ohm") = 0.00001 "Closed switch resistance";
  parameter Real switch2__Goff(quantity = "Conductance", unit = "S") = 0.00001 "Opened switch conductance";
  parameter Real switch2__V0(quantity = "ElectricPotential", unit = "V", start = 30.0) = 30.0 "Initial arc voltage";
  parameter Real switch2__dVdt(quantity = "VoltageSlope", unit = "V/s", start = 10000.0) = 10000.0 "Arc voltage slope";
  parameter Real switch2__Vmax(quantity = "ElectricPotential", unit = "V", start = 60.0) = 60.0 "Max. arc voltage";
  Boolean switch2__control "true => p--n connected, false => switch open";
  protected Boolean switch2__on = switch2__control;
  protected Boolean switch2__off(start = false, fixed = true);
  protected discrete Real switch2__tSwitch(quantity = "Time", unit = "s", start = -1e+60);
  protected Boolean switch2__quenched(start = true, fixed = true);
initial equation
  booleanPulse__pulsStart = booleanPulse__startTime;
equation
when sample(booleanPulse__startTime, booleanPulse__period) then
  booleanPulse__pulsStart = time;
  end when;
  booleanPulse__y = time >= booleanPulse__pulsStart and time < booleanPulse__pulsStart + booleanPulse__Twidth;
  ground1__p__v = 0.0;
  constantVoltage1__v = constantVoltage1__V;
  constantVoltage1__v = constantVoltage1__p__v - constantVoltage1__n__v;
  0.0 = constantVoltage1__p__i + constantVoltage1__n__i;
  constantVoltage1__i = constantVoltage1__p__i;
  inductor1__L * der(inductor1__i) = inductor1__v;
  inductor1__v = inductor1__p__v - inductor1__n__v;
  0.0 = inductor1__p__i + inductor1__n__i;
  inductor1__i = inductor1__p__i;
  assert(1.0 + resistor1__alpha * (resistor1__T_heatPort - resistor1__T_ref) >= 0.000000000000001,"Temperature outside scope of model!");
  resistor1__R_actual = resistor1__R * (1.0 + resistor1__alpha * (resistor1__T_heatPort - resistor1__T_ref));
  resistor1__v = resistor1__R_actual * resistor1__i;
  resistor1__LossPower = resistor1__v * resistor1__i;
  resistor1__v = resistor1__p__v - resistor1__n__v;
  0.0 = resistor1__p__i + resistor1__n__i;
  resistor1__i = resistor1__p__i;
  resistor1__T_heatPort = resistor1__T;
  switch1__v = switch1__s * (if switch1__control then switch1__Ron else 1.0);
  switch1__i = switch1__s * (if switch1__control then 1.0 else switch1__Goff);
  switch1__LossPower = switch1__v * switch1__i;
  switch1__v = switch1__p__v - switch1__n__v;
  0.0 = switch1__p__i + switch1__n__i;
  switch1__i = switch1__p__i;
  switch1__T_heatPort = switch1__T;
  ground2__p__v = 0.0;
  constantVoltage2__v = constantVoltage2__V;
  constantVoltage2__v = constantVoltage2__p__v - constantVoltage2__n__v;
  0.0 = constantVoltage2__p__i + constantVoltage2__n__i;
  constantVoltage2__i = constantVoltage2__p__i;
  inductor2__L * der(inductor2__i) = inductor2__v;
  inductor2__v = inductor2__p__v - inductor2__n__v;
  0.0 = inductor2__p__i + inductor2__n__i;
  inductor2__i = inductor2__p__i;
  assert(1.0 + resistor2__alpha * (resistor2__T_heatPort - resistor2__T_ref) >= 0.000000000000001,"Temperature outside scope of model!");
  resistor2__R_actual = resistor2__R * (1.0 + resistor2__alpha * (resistor2__T_heatPort - resistor2__T_ref));
  resistor2__v = resistor2__R_actual * resistor2__i;
  resistor2__LossPower = resistor2__v * resistor2__i;
  resistor2__v = resistor2__p__v - resistor2__n__v;
  0.0 = resistor2__p__i + resistor2__n__i;
  resistor2__i = resistor2__p__i;
  resistor2__T_heatPort = resistor2__T;
  switch2__off = not switch2__on;
when edge(switch2__off) then
  switch2__tSwitch = time;
  end when;
  switch2__quenched = switch2__off and (abs(switch2__i) <= abs(switch2__v) * switch2__Goff or pre(switch2__quenched));
  if switch2__on then
  switch2__v = switch2__Ron * switch2__i;
  else
  if switch2__quenched then
  switch2__i = switch2__Goff * switch2__v;
  else
  switch2__v = min(switch2__Vmax, switch2__V0 + switch2__dVdt * (time - switch2__tSwitch)) * /*Real*/(sign(switch2__i));
  end if;
  end if;
  switch2__LossPower = switch2__v * switch2__i;
  switch2__v = switch2__p__v - switch2__n__v;
  0.0 = switch2__p__i + switch2__n__i;
  switch2__i = switch2__p__i;
  switch2__T_heatPort = switch2__T;
  ground1__p__i + constantVoltage1__n__i + resistor1__n__i = 0.0;
  constantVoltage1__p__i + switch1__p__i = 0.0;
  inductor1__p__i + switch1__n__i = 0.0;
  inductor1__n__i + resistor1__p__i = 0.0;
  ground2__p__i + constantVoltage2__n__i + resistor2__n__i = 0.0;
  constantVoltage2__p__i + switch2__p__i = 0.0;
  inductor2__p__i + switch2__n__i = 0.0;
  inductor2__n__i + resistor2__p__i = 0.0;
  inductor1__n__v = resistor1__p__v;
  constantVoltage1__n__v = ground1__p__v;
  constantVoltage1__n__v = resistor1__n__v;
  inductor1__p__v = switch1__n__v;
  constantVoltage1__p__v = switch1__p__v;
  inductor2__n__v = resistor2__p__v;
  constantVoltage2__n__v = ground2__p__v;
  constantVoltage2__n__v = resistor2__n__v;
  inductor2__p__v = switch2__n__v;
  constantVoltage2__p__v = switch2__p__v;
  booleanPulse__y = switch1__control;
  booleanPulse__y = switch2__control;
end Modelica__Electrical__Analog__Examples__SwitchWithArc;
