class Modelica__Mechanics__Rotational__Examples__Backlash "Example to demonstrate backlash"
  parameter Real fixed1__phi0(quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Fixed offset angle of housing";
  Real fixed1__flange__phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
  Real fixed1__flange__tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
  Real springDamper__phi_rel(quantity = "Angle", unit = "rad", displayUnit = "deg", start = 0.0, nominal = if springDamper__phi_nominal >= 0.000000000000001 then springDamper__phi_nominal else 1.0, stateSelect = StateSelect.prefer) "Relative rotation angle (= flange_b.phi - flange_a.phi)";
  Real springDamper__a_rel(quantity = "AngularAcceleration", unit = "rad/s2", start = 0.0) "Relative angular acceleration (= der(w_rel))";
  Real springDamper__tau(quantity = "Torque", unit = "N.m") "Torque between flanges (= flange_b.tau)";
  Real springDamper__flange_a__phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
  Real springDamper__flange_a__tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
  Real springDamper__flange_b__phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
  Real springDamper__flange_b__tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
  parameter Real springDamper__phi_nominal(quantity = "Angle", unit = "rad", displayUnit = "rad", min = 0.0) = 1.0 "Nominal value of phi_rel (used for scaling)";
   parameter Boolean springDamper__useHeatPort = false "=true, if heatPort is enabled";
  Real springDamper__lossPower(quantity = "Power", unit = "W") "Loss power leaving component via heatPort (> 0, if heat is flowing out of component)";
  parameter Real springDamper__c(quantity = "RotationalSpringConstant", unit = "N.m/rad", min = 0.0, start = 100000.0) = 20000.0 "Spring constant";
  parameter Real springDamper__d(quantity = "RotationalDampingConstant", unit = "N.m.s/rad", min = 0.0, start = 0.0) = 50.0 "Damping constant";
  parameter Real springDamper__phi_rel0(quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Unstretched spring angle";
  protected Real springDamper__tau_c(quantity = "Torque", unit = "N.m") "Spring torque";
  protected Real springDamper__tau_d(quantity = "Torque", unit = "N.m") "Damping torque";
  Real springDamper__w_rel(quantity = "AngularVelocity", unit = "rad/s", start = 0.0, stateSelect = StateSelect.prefer) "Relative angular velocity (= der(phi_rel))";
  Real inertia1__flange_a__phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
  Real inertia1__flange_a__tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
  Real inertia1__flange_b__phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
  Real inertia1__flange_b__tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
  parameter Real inertia1__J(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0, start = 1.0) = 5.0 "Moment of inertia";
   Real inertia1__a(quantity = "AngularAcceleration", unit = "rad/s2") "Absolute angular acceleration of component (= der(w))";
  Real inertia1__phi(quantity = "Angle", unit = "rad", displayUnit = "deg", start = 1.570796326794897, fixed = true, stateSelect = StateSelect.default) "Absolute rotation angle of component";
  Real inertia1__w(quantity = "AngularVelocity", unit = "rad/s", start = 0.0, fixed = true, stateSelect = StateSelect.default) "Absolute angular velocity of component (= der(phi))";
  parameter Real fixed2__phi0(quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Fixed offset angle of housing";
  Real fixed2__flange__phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
  Real fixed2__flange__tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
  Real elastoBacklash__phi_rel(quantity = "Angle", unit = "rad", displayUnit = "deg", start = 0.0, nominal = if elastoBacklash__phi_nominal >= 0.000000000000001 then elastoBacklash__phi_nominal else 1.0, stateSelect = StateSelect.prefer) "Relative rotation angle (= flange_b.phi - flange_a.phi)";
  Real elastoBacklash__a_rel(quantity = "AngularAcceleration", unit = "rad/s2", start = 0.0) "Relative angular acceleration (= der(w_rel))";
  Real elastoBacklash__tau(quantity = "Torque", unit = "N.m") "Torque between flanges (= flange_b.tau)";
  Real elastoBacklash__flange_a__phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
  Real elastoBacklash__flange_a__tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
  Real elastoBacklash__flange_b__phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
  Real elastoBacklash__flange_b__tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
  parameter Real elastoBacklash__phi_nominal(quantity = "Angle", unit = "rad", displayUnit = "rad", min = 0.0) = 1.0 "Nominal value of phi_rel (used for scaling)";
   parameter Boolean elastoBacklash__useHeatPort = false "=true, if heatPort is enabled";
  Real elastoBacklash__lossPower(quantity = "Power", unit = "W") "Loss power leaving component via heatPort (> 0, if heat is flowing out of component)";
  parameter Real elastoBacklash__c(quantity = "RotationalSpringConstant", unit = "N.m/rad", min = 1e-60, start = 100000.0) = 20000.0 "Spring constant (c > 0 required)";
  parameter Real elastoBacklash__d(quantity = "RotationalDampingConstant", unit = "N.m.s/rad", min = 0.0, start = 0.0) = 50.0 "Damping constant";
  parameter Real elastoBacklash__b(quantity = "Angle", unit = "rad", displayUnit = "deg", min = 0.0) = 0.7853981633974483 "Total backlash";
  parameter Real elastoBacklash__phi_rel0(quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Unstretched spring angle";
  protected Real elastoBacklash__tau_c(quantity = "Torque", unit = "N.m");
  protected Real elastoBacklash__tau_d(quantity = "Torque", unit = "N.m");
  protected Real elastoBacklash__phi_diff(quantity = "Angle", unit = "rad", displayUnit = "deg") = elastoBacklash__phi_rel - elastoBacklash__phi_rel0;
  protected constant Real elastoBacklash__bEps(quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0000000001 "Minimum backlash";
  Real elastoBacklash__w_rel(quantity = "AngularVelocity", unit = "rad/s", start = 0.0, stateSelect = StateSelect.prefer) "Relative angular velocity (= der(phi_rel))";
  protected final parameter Real elastoBacklash__bMax(quantity = "Angle", unit = "rad", displayUnit = "deg") = elastoBacklash__b / 2.0 "Backlash in range bMin <= phi_rel - phi_rel0 <= bMax";
  protected final parameter Real elastoBacklash__bMin(quantity = "Angle", unit = "rad", displayUnit = "deg") = -elastoBacklash__bMax "Backlash in range bMin <= phi_rel - phi_rel0 <= bMax";
  Real inertia2__flange_a__phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
  Real inertia2__flange_a__tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
  Real inertia2__flange_b__phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
  Real inertia2__flange_b__tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
  parameter Real inertia2__J(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0, start = 1.0) = 5.0 "Moment of inertia";
   Real inertia2__a(quantity = "AngularAcceleration", unit = "rad/s2") "Absolute angular acceleration of component (= der(w))";
  Real inertia2__phi(quantity = "Angle", unit = "rad", displayUnit = "deg", start = 1.570796326794897, fixed = true, stateSelect = StateSelect.default) "Absolute rotation angle of component";
  Real inertia2__w(quantity = "AngularVelocity", unit = "rad/s", start = 0.0, fixed = true, stateSelect = StateSelect.default) "Absolute angular velocity of component (= der(phi))";
equation
  fixed1__flange__phi = fixed1__phi0;
  springDamper__tau_c = springDamper__c * (springDamper__phi_rel - springDamper__phi_rel0);
  springDamper__tau_d = springDamper__d * springDamper__w_rel;
  springDamper__tau = springDamper__tau_c + springDamper__tau_d;
  springDamper__lossPower = springDamper__tau_d * springDamper__w_rel;
  springDamper__phi_rel = springDamper__flange_b__phi - springDamper__flange_a__phi;
  springDamper__w_rel = der(springDamper__phi_rel);
  springDamper__a_rel = der(springDamper__w_rel);
  springDamper__flange_b__tau = springDamper__tau;
  springDamper__flange_a__tau = -springDamper__tau;
  inertia1__phi = inertia1__flange_a__phi;
  inertia1__phi = inertia1__flange_b__phi;
  inertia1__w = der(inertia1__phi);
  inertia1__a = der(inertia1__w);
  inertia1__J * inertia1__a = inertia1__flange_a__tau + inertia1__flange_b__tau;
  fixed2__flange__phi = fixed2__phi0;
  if initial() then
  elastoBacklash__tau_c = if elastoBacklash__phi_diff > 1.5 * elastoBacklash__bMax then elastoBacklash__c * (elastoBacklash__phi_diff - elastoBacklash__bMax) else if elastoBacklash__phi_diff < 1.5 * elastoBacklash__bMin then elastoBacklash__c * (elastoBacklash__phi_diff - elastoBacklash__bMin) else 0.3333333333333333 * elastoBacklash__c * elastoBacklash__phi_diff;
  elastoBacklash__tau_d = elastoBacklash__d * elastoBacklash__w_rel;
  elastoBacklash__tau = elastoBacklash__tau_c + elastoBacklash__tau_d;
  elastoBacklash__lossPower = elastoBacklash__tau_d * elastoBacklash__w_rel;
  else
  elastoBacklash__tau_c = if abs(elastoBacklash__b) <= 0.0000000001 then elastoBacklash__c * elastoBacklash__phi_diff else if elastoBacklash__phi_diff > elastoBacklash__bMax then elastoBacklash__c * (elastoBacklash__phi_diff - elastoBacklash__bMax) else if elastoBacklash__phi_diff < elastoBacklash__bMin then elastoBacklash__c * (elastoBacklash__phi_diff - elastoBacklash__bMin) else 0.0;
  elastoBacklash__tau_d = elastoBacklash__d * elastoBacklash__w_rel;
  elastoBacklash__tau = if abs(elastoBacklash__b) <= 0.0000000001 then elastoBacklash__tau_c + elastoBacklash__tau_d else if elastoBacklash__phi_diff > elastoBacklash__bMax then if noEvent(elastoBacklash__tau_c + elastoBacklash__tau_d <= 0.0) then 0.0 else elastoBacklash__tau_c + min(elastoBacklash__tau_c, elastoBacklash__tau_d) else if elastoBacklash__phi_diff < elastoBacklash__bMin then if noEvent(elastoBacklash__tau_c + elastoBacklash__tau_d >= 0.0) then 0.0 else elastoBacklash__tau_c + max(elastoBacklash__tau_c, elastoBacklash__tau_d) else 0.0;
  elastoBacklash__lossPower = if abs(elastoBacklash__b) <= 0.0000000001 then elastoBacklash__tau_d * elastoBacklash__w_rel else if elastoBacklash__phi_diff > elastoBacklash__bMax then if noEvent(elastoBacklash__tau_c + elastoBacklash__tau_d <= 0.0) then 0.0 else min(elastoBacklash__tau_c, elastoBacklash__tau_d) * elastoBacklash__w_rel else if elastoBacklash__phi_diff < elastoBacklash__bMin then if noEvent(elastoBacklash__tau_c + elastoBacklash__tau_d >= 0.0) then 0.0 else max(elastoBacklash__tau_c, elastoBacklash__tau_d) * elastoBacklash__w_rel else 0.0;
  end if;
  elastoBacklash__phi_rel = elastoBacklash__flange_b__phi - elastoBacklash__flange_a__phi;
  elastoBacklash__w_rel = der(elastoBacklash__phi_rel);
  elastoBacklash__a_rel = der(elastoBacklash__w_rel);
  elastoBacklash__flange_b__tau = elastoBacklash__tau;
  elastoBacklash__flange_a__tau = -elastoBacklash__tau;
  inertia2__phi = inertia2__flange_a__phi;
  inertia2__phi = inertia2__flange_b__phi;
  inertia2__w = der(inertia2__phi);
  inertia2__a = der(inertia2__w);
  inertia2__J * inertia2__a = inertia2__flange_a__tau + inertia2__flange_b__tau;
  fixed1__flange__tau + springDamper__flange_a__tau = 0.0;
  springDamper__flange_b__tau + inertia1__flange_a__tau = 0.0;
  inertia1__flange_b__tau = 0.0;
  fixed2__flange__tau + elastoBacklash__flange_a__tau = 0.0;
  elastoBacklash__flange_b__tau + inertia2__flange_a__tau = 0.0;
  inertia2__flange_b__tau = 0.0;
  inertia1__flange_a__phi = springDamper__flange_b__phi;
  elastoBacklash__flange_b__phi = inertia2__flange_a__phi;
  fixed1__flange__phi = springDamper__flange_a__phi;
  elastoBacklash__flange_a__phi = fixed2__flange__phi;
end Modelica__Mechanics__Rotational__Examples__Backlash;
