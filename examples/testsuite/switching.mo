/*DEPRECATED: modelicaOutput option no longer needed*/
class switching__interleaved
  Real constantvoltage1__v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
  Real constantvoltage1__i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
  Real constantvoltage1__p__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real constantvoltage1__p__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real constantvoltage1__n__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real constantvoltage1__n__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  parameter Real constantvoltage1__V(quantity = "ElectricPotential", unit = "V", start = 1.0) = 12.0 "Value of constant voltage";
  Real ground1__p__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real ground1__p__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real buckbranch1__pin_p__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real buckbranch1__pin_p__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real buckbranch1__negativepin1__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real buckbranch1__negativepin1__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real buckbranch1__pin_n__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real buckbranch1__pin_n__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Boolean buckbranch1__u;
  Real buckbranch1__idealclosingswitch1__v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
  Real buckbranch1__idealclosingswitch1__i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
  Real buckbranch1__idealclosingswitch1__p__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real buckbranch1__idealclosingswitch1__p__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real buckbranch1__idealclosingswitch1__n__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real buckbranch1__idealclosingswitch1__n__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  parameter Boolean buckbranch1__idealclosingswitch1__useHeatPort = false "=true, if HeatPort is enabled";
  parameter Real buckbranch1__idealclosingswitch1__T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) = 293.15 "Fixed device temperature if useHeatPort = false";
  Real buckbranch1__idealclosingswitch1__LossPower(quantity = "Power", unit = "W") "Loss power leaving component via HeatPort";
  Real buckbranch1__idealclosingswitch1__T_heatPort(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature of HeatPort";
  parameter Real buckbranch1__idealclosingswitch1__Ron(quantity = "Resistance", unit = "Ohm", min = 0.0) = 0.00001 "Closed switch resistance";
  parameter Real buckbranch1__idealclosingswitch1__Goff(quantity = "Conductance", unit = "S", min = 0.0) = 0.00001 "Opened switch conductance";
  Boolean buckbranch1__idealclosingswitch1__control "true => p--n connected, false => switch open";
  protected Real buckbranch1__idealclosingswitch1__s(unit = "1") "Auxiliary variable";
  protected constant Real buckbranch1__idealclosingswitch1__unitVoltage(quantity = "ElectricPotential", unit = "V") = 1.0;
  protected constant Real buckbranch1__idealclosingswitch1__unitCurrent(quantity = "ElectricCurrent", unit = "A") = 1.0;
  Real buckbranch1__idealdiode1__v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
  Real buckbranch1__idealdiode1__i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
  Real buckbranch1__idealdiode1__p__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real buckbranch1__idealdiode1__p__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real buckbranch1__idealdiode1__n__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real buckbranch1__idealdiode1__n__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  parameter Boolean buckbranch1__idealdiode1__useHeatPort = false "=true, if HeatPort is enabled";
  parameter Real buckbranch1__idealdiode1__T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) = 293.15 "Fixed device temperature if useHeatPort = false";
  Real buckbranch1__idealdiode1__LossPower(quantity = "Power", unit = "W") "Loss power leaving component via HeatPort";
  Real buckbranch1__idealdiode1__T_heatPort(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature of HeatPort";
  parameter Real buckbranch1__idealdiode1__Ron(quantity = "Resistance", unit = "Ohm", min = 0.0) = 0.00001 "Forward state-on differential resistance (closed diode resistance)";
  parameter Real buckbranch1__idealdiode1__Goff(quantity = "Conductance", unit = "S", min = 0.0) = 0.00001 "Backward state-off conductance (opened diode conductance)";
  parameter Real buckbranch1__idealdiode1__Vknee(quantity = "ElectricPotential", unit = "V", min = 0.0, start = 0.0) = 0.0 "Forward threshold voltage";
  Boolean buckbranch1__idealdiode1__off(start = true) "Switching state";
  protected Real buckbranch1__idealdiode1__s(unit = "1", start = 0.0) "Auxiliary variable for actual position on the ideal diode characteristic";
  protected constant Real buckbranch1__idealdiode1__unitVoltage(quantity = "ElectricPotential", unit = "V") = 1.0;
  protected constant Real buckbranch1__idealdiode1__unitCurrent(quantity = "ElectricCurrent", unit = "A") = 1.0;
  Real buckbranch1__inductor1__v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
  Real buckbranch1__inductor1__i(quantity = "ElectricCurrent", unit = "A", start = 0.0) "Current flowing from pin p to pin n";
  Real buckbranch1__inductor1__p__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real buckbranch1__inductor1__p__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real buckbranch1__inductor1__n__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real buckbranch1__inductor1__n__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  parameter Real buckbranch1__inductor1__L(quantity = "Inductance", unit = "H", start = 1.0) = 0.0001 "Inductance";
  Real buckbranch2__pin_p__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real buckbranch2__pin_p__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real buckbranch2__negativepin1__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real buckbranch2__negativepin1__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real buckbranch2__pin_n__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real buckbranch2__pin_n__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Boolean buckbranch2__u;
  Real buckbranch2__idealclosingswitch1__v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
  Real buckbranch2__idealclosingswitch1__i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
  Real buckbranch2__idealclosingswitch1__p__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real buckbranch2__idealclosingswitch1__p__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real buckbranch2__idealclosingswitch1__n__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real buckbranch2__idealclosingswitch1__n__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  parameter Boolean buckbranch2__idealclosingswitch1__useHeatPort = false "=true, if HeatPort is enabled";
  parameter Real buckbranch2__idealclosingswitch1__T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) = 293.15 "Fixed device temperature if useHeatPort = false";
  Real buckbranch2__idealclosingswitch1__LossPower(quantity = "Power", unit = "W") "Loss power leaving component via HeatPort";
  Real buckbranch2__idealclosingswitch1__T_heatPort(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature of HeatPort";
  parameter Real buckbranch2__idealclosingswitch1__Ron(quantity = "Resistance", unit = "Ohm", min = 0.0) = 0.00001 "Closed switch resistance";
  parameter Real buckbranch2__idealclosingswitch1__Goff(quantity = "Conductance", unit = "S", min = 0.0) = 0.00001 "Opened switch conductance";
  Boolean buckbranch2__idealclosingswitch1__control "true => p--n connected, false => switch open";
  protected Real buckbranch2__idealclosingswitch1__s(unit = "1") "Auxiliary variable";
  protected constant Real buckbranch2__idealclosingswitch1__unitVoltage(quantity = "ElectricPotential", unit = "V") = 1.0;
  protected constant Real buckbranch2__idealclosingswitch1__unitCurrent(quantity = "ElectricCurrent", unit = "A") = 1.0;
  Real buckbranch2__idealdiode1__v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
  Real buckbranch2__idealdiode1__i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
  Real buckbranch2__idealdiode1__p__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real buckbranch2__idealdiode1__p__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real buckbranch2__idealdiode1__n__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real buckbranch2__idealdiode1__n__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  parameter Boolean buckbranch2__idealdiode1__useHeatPort = false "=true, if HeatPort is enabled";
  parameter Real buckbranch2__idealdiode1__T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) = 293.15 "Fixed device temperature if useHeatPort = false";
  Real buckbranch2__idealdiode1__LossPower(quantity = "Power", unit = "W") "Loss power leaving component via HeatPort";
  Real buckbranch2__idealdiode1__T_heatPort(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature of HeatPort";
  parameter Real buckbranch2__idealdiode1__Ron(quantity = "Resistance", unit = "Ohm", min = 0.0) = 0.00001 "Forward state-on differential resistance (closed diode resistance)";
  parameter Real buckbranch2__idealdiode1__Goff(quantity = "Conductance", unit = "S", min = 0.0) = 0.00001 "Backward state-off conductance (opened diode conductance)";
  parameter Real buckbranch2__idealdiode1__Vknee(quantity = "ElectricPotential", unit = "V", min = 0.0, start = 0.0) = 0.0 "Forward threshold voltage";
  Boolean buckbranch2__idealdiode1__off(start = true) "Switching state";
  protected Real buckbranch2__idealdiode1__s(unit = "1", start = 0.0) "Auxiliary variable for actual position on the ideal diode characteristic";
  protected constant Real buckbranch2__idealdiode1__unitVoltage(quantity = "ElectricPotential", unit = "V") = 1.0;
  protected constant Real buckbranch2__idealdiode1__unitCurrent(quantity = "ElectricCurrent", unit = "A") = 1.0;
  Real buckbranch2__inductor1__v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
  Real buckbranch2__inductor1__i(quantity = "ElectricCurrent", unit = "A", start = 0.0) "Current flowing from pin p to pin n";
  Real buckbranch2__inductor1__p__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real buckbranch2__inductor1__p__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real buckbranch2__inductor1__n__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real buckbranch2__inductor1__n__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  parameter Real buckbranch2__inductor1__L(quantity = "Inductance", unit = "H", start = 1.0) = 0.0001 "Inductance";
  Real buckbranch3__pin_p__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real buckbranch3__pin_p__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real buckbranch3__negativepin1__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real buckbranch3__negativepin1__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real buckbranch3__pin_n__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real buckbranch3__pin_n__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Boolean buckbranch3__u;
  Real buckbranch3__idealclosingswitch1__v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
  Real buckbranch3__idealclosingswitch1__i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
  Real buckbranch3__idealclosingswitch1__p__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real buckbranch3__idealclosingswitch1__p__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real buckbranch3__idealclosingswitch1__n__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real buckbranch3__idealclosingswitch1__n__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  parameter Boolean buckbranch3__idealclosingswitch1__useHeatPort = false "=true, if HeatPort is enabled";
  parameter Real buckbranch3__idealclosingswitch1__T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) = 293.15 "Fixed device temperature if useHeatPort = false";
  Real buckbranch3__idealclosingswitch1__LossPower(quantity = "Power", unit = "W") "Loss power leaving component via HeatPort";
  Real buckbranch3__idealclosingswitch1__T_heatPort(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature of HeatPort";
  parameter Real buckbranch3__idealclosingswitch1__Ron(quantity = "Resistance", unit = "Ohm", min = 0.0) = 0.00001 "Closed switch resistance";
  parameter Real buckbranch3__idealclosingswitch1__Goff(quantity = "Conductance", unit = "S", min = 0.0) = 0.00001 "Opened switch conductance";
  Boolean buckbranch3__idealclosingswitch1__control "true => p--n connected, false => switch open";
  protected Real buckbranch3__idealclosingswitch1__s(unit = "1") "Auxiliary variable";
  protected constant Real buckbranch3__idealclosingswitch1__unitVoltage(quantity = "ElectricPotential", unit = "V") = 1.0;
  protected constant Real buckbranch3__idealclosingswitch1__unitCurrent(quantity = "ElectricCurrent", unit = "A") = 1.0;
  Real buckbranch3__idealdiode1__v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
  Real buckbranch3__idealdiode1__i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
  Real buckbranch3__idealdiode1__p__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real buckbranch3__idealdiode1__p__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real buckbranch3__idealdiode1__n__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real buckbranch3__idealdiode1__n__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  parameter Boolean buckbranch3__idealdiode1__useHeatPort = false "=true, if HeatPort is enabled";
  parameter Real buckbranch3__idealdiode1__T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) = 293.15 "Fixed device temperature if useHeatPort = false";
  Real buckbranch3__idealdiode1__LossPower(quantity = "Power", unit = "W") "Loss power leaving component via HeatPort";
  Real buckbranch3__idealdiode1__T_heatPort(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature of HeatPort";
  parameter Real buckbranch3__idealdiode1__Ron(quantity = "Resistance", unit = "Ohm", min = 0.0) = 0.00001 "Forward state-on differential resistance (closed diode resistance)";
  parameter Real buckbranch3__idealdiode1__Goff(quantity = "Conductance", unit = "S", min = 0.0) = 0.00001 "Backward state-off conductance (opened diode conductance)";
  parameter Real buckbranch3__idealdiode1__Vknee(quantity = "ElectricPotential", unit = "V", min = 0.0, start = 0.0) = 0.0 "Forward threshold voltage";
  Boolean buckbranch3__idealdiode1__off(start = true) "Switching state";
  protected Real buckbranch3__idealdiode1__s(unit = "1", start = 0.0) "Auxiliary variable for actual position on the ideal diode characteristic";
  protected constant Real buckbranch3__idealdiode1__unitVoltage(quantity = "ElectricPotential", unit = "V") = 1.0;
  protected constant Real buckbranch3__idealdiode1__unitCurrent(quantity = "ElectricCurrent", unit = "A") = 1.0;
  Real buckbranch3__inductor1__v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
  Real buckbranch3__inductor1__i(quantity = "ElectricCurrent", unit = "A", start = 0.0) "Current flowing from pin p to pin n";
  Real buckbranch3__inductor1__p__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real buckbranch3__inductor1__p__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real buckbranch3__inductor1__n__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real buckbranch3__inductor1__n__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  parameter Real buckbranch3__inductor1__L(quantity = "Inductance", unit = "H", start = 1.0) = 0.0001 "Inductance";
  Real buckbranch4__pin_p__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real buckbranch4__pin_p__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real buckbranch4__negativepin1__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real buckbranch4__negativepin1__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real buckbranch4__pin_n__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real buckbranch4__pin_n__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Boolean buckbranch4__u;
  Real buckbranch4__idealclosingswitch1__v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
  Real buckbranch4__idealclosingswitch1__i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
  Real buckbranch4__idealclosingswitch1__p__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real buckbranch4__idealclosingswitch1__p__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real buckbranch4__idealclosingswitch1__n__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real buckbranch4__idealclosingswitch1__n__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  parameter Boolean buckbranch4__idealclosingswitch1__useHeatPort = false "=true, if HeatPort is enabled";
  parameter Real buckbranch4__idealclosingswitch1__T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) = 293.15 "Fixed device temperature if useHeatPort = false";
  Real buckbranch4__idealclosingswitch1__LossPower(quantity = "Power", unit = "W") "Loss power leaving component via HeatPort";
  Real buckbranch4__idealclosingswitch1__T_heatPort(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature of HeatPort";
  parameter Real buckbranch4__idealclosingswitch1__Ron(quantity = "Resistance", unit = "Ohm", min = 0.0) = 0.00001 "Closed switch resistance";
  parameter Real buckbranch4__idealclosingswitch1__Goff(quantity = "Conductance", unit = "S", min = 0.0) = 0.00001 "Opened switch conductance";
  Boolean buckbranch4__idealclosingswitch1__control "true => p--n connected, false => switch open";
  protected Real buckbranch4__idealclosingswitch1__s(unit = "1") "Auxiliary variable";
  protected constant Real buckbranch4__idealclosingswitch1__unitVoltage(quantity = "ElectricPotential", unit = "V") = 1.0;
  protected constant Real buckbranch4__idealclosingswitch1__unitCurrent(quantity = "ElectricCurrent", unit = "A") = 1.0;
  Real buckbranch4__idealdiode1__v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
  Real buckbranch4__idealdiode1__i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
  Real buckbranch4__idealdiode1__p__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real buckbranch4__idealdiode1__p__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real buckbranch4__idealdiode1__n__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real buckbranch4__idealdiode1__n__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  parameter Boolean buckbranch4__idealdiode1__useHeatPort = false "=true, if HeatPort is enabled";
  parameter Real buckbranch4__idealdiode1__T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) = 293.15 "Fixed device temperature if useHeatPort = false";
  Real buckbranch4__idealdiode1__LossPower(quantity = "Power", unit = "W") "Loss power leaving component via HeatPort";
  Real buckbranch4__idealdiode1__T_heatPort(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature of HeatPort";
  parameter Real buckbranch4__idealdiode1__Ron(quantity = "Resistance", unit = "Ohm", min = 0.0) = 0.00001 "Forward state-on differential resistance (closed diode resistance)";
  parameter Real buckbranch4__idealdiode1__Goff(quantity = "Conductance", unit = "S", min = 0.0) = 0.00001 "Backward state-off conductance (opened diode conductance)";
  parameter Real buckbranch4__idealdiode1__Vknee(quantity = "ElectricPotential", unit = "V", min = 0.0, start = 0.0) = 0.0 "Forward threshold voltage";
  Boolean buckbranch4__idealdiode1__off(start = true) "Switching state";
  protected Real buckbranch4__idealdiode1__s(unit = "1", start = 0.0) "Auxiliary variable for actual position on the ideal diode characteristic";
  protected constant Real buckbranch4__idealdiode1__unitVoltage(quantity = "ElectricPotential", unit = "V") = 1.0;
  protected constant Real buckbranch4__idealdiode1__unitCurrent(quantity = "ElectricCurrent", unit = "A") = 1.0;
  Real buckbranch4__inductor1__v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
  Real buckbranch4__inductor1__i(quantity = "ElectricCurrent", unit = "A", start = 0.0) "Current flowing from pin p to pin n";
  Real buckbranch4__inductor1__p__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real buckbranch4__inductor1__p__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real buckbranch4__inductor1__n__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real buckbranch4__inductor1__n__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  parameter Real buckbranch4__inductor1__L(quantity = "Inductance", unit = "H", start = 1.0) = 0.0001 "Inductance";
  Real capacitor1__v(quantity = "ElectricPotential", unit = "V", start = 0.0) "Voltage drop between the two pins (= p.v - n.v)";
  Real capacitor1__i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
  Real capacitor1__p__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real capacitor1__p__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real capacitor1__n__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real capacitor1__n__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  parameter Real capacitor1__C(quantity = "Capacitance", unit = "F", min = 0.0, start = 1.0) = 0.0001 "Capacitance";
  Real resistor1__v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
  Real resistor1__i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
  Real resistor1__p__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real resistor1__p__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real resistor1__n__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real resistor1__n__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  parameter Boolean resistor1__useHeatPort = false "=true, if HeatPort is enabled";
  parameter Real resistor1__T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) = resistor1__T_ref "Fixed device temperature if useHeatPort = false";
  Real resistor1__LossPower(quantity = "Power", unit = "W") "Loss power leaving component via HeatPort";
  Real resistor1__T_heatPort(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature of HeatPort";
  parameter Real resistor1__R(quantity = "Resistance", unit = "Ohm", start = 1.0) = 10.0 "Resistance at temperature T_ref";
  parameter Real resistor1__T_ref(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) = 300.15 "Reference temperature";
  parameter Real resistor1__alpha(quantity = "LinearTemperatureCoefficient", unit = "1/K") = 0.0 "Temperature coefficient of resistance (R_actual = R*(1 + alpha*(T_heatPort - T_ref))";
  Real resistor1__R_actual(quantity = "Resistance", unit = "Ohm") "Actual resistance = R*(1 + alpha*(T_heatPort - T_ref))";
  Boolean booleandelay2__u "Connector of Boolean input signal";
  Boolean booleandelay2__y(start = false) "Connector of Boolean output signal";
  Real booleandelay2__lastTrueTime(start = 1e+20);
  Real booleandelay2__lastFalseTime(start = 0.0);
  parameter Real booleandelay2__T = 0.000025;
  Boolean booleandelay3__u "Connector of Boolean input signal";
  Boolean booleandelay3__y(start = false) "Connector of Boolean output signal";
  Real booleandelay3__lastTrueTime(start = 1e+20);
  Real booleandelay3__lastFalseTime(start = 0.0);
  parameter Real booleandelay3__T = 0.000025;
  Boolean booleandelay1__u "Connector of Boolean input signal";
  Boolean booleandelay1__y(start = false) "Connector of Boolean output signal";
  Real booleandelay1__lastTrueTime(start = 1e+20);
  Real booleandelay1__lastFalseTime(start = 0.0);
  parameter Real booleandelay1__T = 0.000025;
  Boolean booleanpulse1__y "Connector of Boolean output signal";
  parameter Real booleanpulse1__width(min = 1e-60, max = 100.0) = 12.5 "Width of pulse in % of period";
  parameter Real booleanpulse1__period(quantity = "Time", unit = "s", min = 1e-60, start = 1.0) = 0.0001 "Time for one period";
  parameter Real booleanpulse1__startTime(quantity = "Time", unit = "s") = 0.0 "Time instant of first pulse";
  protected discrete Real booleanpulse1__pulsStart(quantity = "Time", unit = "s") "Start time of pulse";
  protected parameter Real booleanpulse1__Twidth(quantity = "Time", unit = "s") = booleanpulse1__period * booleanpulse1__width / 100.0 "width of one pulse";
initial equation
  booleanpulse1__pulsStart = booleanpulse1__startTime;
equation
  constantvoltage1__v = constantvoltage1__V;
  constantvoltage1__v = constantvoltage1__p__v - constantvoltage1__n__v;
  0.0 = constantvoltage1__p__i + constantvoltage1__n__i;
  constantvoltage1__i = constantvoltage1__p__i;
  ground1__p__v = 0.0;
  buckbranch1__idealclosingswitch1__v = buckbranch1__idealclosingswitch1__s * (if buckbranch1__idealclosingswitch1__control then buckbranch1__idealclosingswitch1__Ron else 1.0);
  buckbranch1__idealclosingswitch1__i = buckbranch1__idealclosingswitch1__s * (if buckbranch1__idealclosingswitch1__control then 1.0 else buckbranch1__idealclosingswitch1__Goff);
  buckbranch1__idealclosingswitch1__LossPower = buckbranch1__idealclosingswitch1__v * buckbranch1__idealclosingswitch1__i;
  buckbranch1__idealclosingswitch1__v = buckbranch1__idealclosingswitch1__p__v - buckbranch1__idealclosingswitch1__n__v;
  0.0 = buckbranch1__idealclosingswitch1__p__i + buckbranch1__idealclosingswitch1__n__i;
  buckbranch1__idealclosingswitch1__i = buckbranch1__idealclosingswitch1__p__i;
  buckbranch1__idealclosingswitch1__T_heatPort = buckbranch1__idealclosingswitch1__T;
  buckbranch1__idealdiode1__off = buckbranch1__idealdiode1__s < 0.0;
  buckbranch1__idealdiode1__v = buckbranch1__idealdiode1__s * (if buckbranch1__idealdiode1__off then 1.0 else buckbranch1__idealdiode1__Ron) + buckbranch1__idealdiode1__Vknee;
  buckbranch1__idealdiode1__i = buckbranch1__idealdiode1__s * (if buckbranch1__idealdiode1__off then buckbranch1__idealdiode1__Goff else 1.0) + buckbranch1__idealdiode1__Goff * buckbranch1__idealdiode1__Vknee;
  buckbranch1__idealdiode1__LossPower = buckbranch1__idealdiode1__v * buckbranch1__idealdiode1__i;
  buckbranch1__idealdiode1__v = buckbranch1__idealdiode1__p__v - buckbranch1__idealdiode1__n__v;
  0.0 = buckbranch1__idealdiode1__p__i + buckbranch1__idealdiode1__n__i;
  buckbranch1__idealdiode1__i = buckbranch1__idealdiode1__p__i;
  buckbranch1__idealdiode1__T_heatPort = buckbranch1__idealdiode1__T;
  buckbranch1__inductor1__L * der(buckbranch1__inductor1__i) = buckbranch1__inductor1__v;
  buckbranch1__inductor1__v = buckbranch1__inductor1__p__v - buckbranch1__inductor1__n__v;
  0.0 = buckbranch1__inductor1__p__i + buckbranch1__inductor1__n__i;
  buckbranch1__inductor1__i = buckbranch1__inductor1__p__i;
  buckbranch2__idealclosingswitch1__v = buckbranch2__idealclosingswitch1__s * (if buckbranch2__idealclosingswitch1__control then buckbranch2__idealclosingswitch1__Ron else 1.0);
  buckbranch2__idealclosingswitch1__i = buckbranch2__idealclosingswitch1__s * (if buckbranch2__idealclosingswitch1__control then 1.0 else buckbranch2__idealclosingswitch1__Goff);
  buckbranch2__idealclosingswitch1__LossPower = buckbranch2__idealclosingswitch1__v * buckbranch2__idealclosingswitch1__i;
  buckbranch2__idealclosingswitch1__v = buckbranch2__idealclosingswitch1__p__v - buckbranch2__idealclosingswitch1__n__v;
  0.0 = buckbranch2__idealclosingswitch1__p__i + buckbranch2__idealclosingswitch1__n__i;
  buckbranch2__idealclosingswitch1__i = buckbranch2__idealclosingswitch1__p__i;
  buckbranch2__idealclosingswitch1__T_heatPort = buckbranch2__idealclosingswitch1__T;
  buckbranch2__idealdiode1__off = buckbranch2__idealdiode1__s < 0.0;
  buckbranch2__idealdiode1__v = buckbranch2__idealdiode1__s * (if buckbranch2__idealdiode1__off then 1.0 else buckbranch2__idealdiode1__Ron) + buckbranch2__idealdiode1__Vknee;
  buckbranch2__idealdiode1__i = buckbranch2__idealdiode1__s * (if buckbranch2__idealdiode1__off then buckbranch2__idealdiode1__Goff else 1.0) + buckbranch2__idealdiode1__Goff * buckbranch2__idealdiode1__Vknee;
  buckbranch2__idealdiode1__LossPower = buckbranch2__idealdiode1__v * buckbranch2__idealdiode1__i;
  buckbranch2__idealdiode1__v = buckbranch2__idealdiode1__p__v - buckbranch2__idealdiode1__n__v;
  0.0 = buckbranch2__idealdiode1__p__i + buckbranch2__idealdiode1__n__i;
  buckbranch2__idealdiode1__i = buckbranch2__idealdiode1__p__i;
  buckbranch2__idealdiode1__T_heatPort = buckbranch2__idealdiode1__T;
  buckbranch2__inductor1__L * der(buckbranch2__inductor1__i) = buckbranch2__inductor1__v;
  buckbranch2__inductor1__v = buckbranch2__inductor1__p__v - buckbranch2__inductor1__n__v;
  0.0 = buckbranch2__inductor1__p__i + buckbranch2__inductor1__n__i;
  buckbranch2__inductor1__i = buckbranch2__inductor1__p__i;
  buckbranch3__idealclosingswitch1__v = buckbranch3__idealclosingswitch1__s * (if buckbranch3__idealclosingswitch1__control then buckbranch3__idealclosingswitch1__Ron else 1.0);
  buckbranch3__idealclosingswitch1__i = buckbranch3__idealclosingswitch1__s * (if buckbranch3__idealclosingswitch1__control then 1.0 else buckbranch3__idealclosingswitch1__Goff);
  buckbranch3__idealclosingswitch1__LossPower = buckbranch3__idealclosingswitch1__v * buckbranch3__idealclosingswitch1__i;
  buckbranch3__idealclosingswitch1__v = buckbranch3__idealclosingswitch1__p__v - buckbranch3__idealclosingswitch1__n__v;
  0.0 = buckbranch3__idealclosingswitch1__p__i + buckbranch3__idealclosingswitch1__n__i;
  buckbranch3__idealclosingswitch1__i = buckbranch3__idealclosingswitch1__p__i;
  buckbranch3__idealclosingswitch1__T_heatPort = buckbranch3__idealclosingswitch1__T;
  buckbranch3__idealdiode1__off = buckbranch3__idealdiode1__s < 0.0;
  buckbranch3__idealdiode1__v = buckbranch3__idealdiode1__s * (if buckbranch3__idealdiode1__off then 1.0 else buckbranch3__idealdiode1__Ron) + buckbranch3__idealdiode1__Vknee;
  buckbranch3__idealdiode1__i = buckbranch3__idealdiode1__s * (if buckbranch3__idealdiode1__off then buckbranch3__idealdiode1__Goff else 1.0) + buckbranch3__idealdiode1__Goff * buckbranch3__idealdiode1__Vknee;
  buckbranch3__idealdiode1__LossPower = buckbranch3__idealdiode1__v * buckbranch3__idealdiode1__i;
  buckbranch3__idealdiode1__v = buckbranch3__idealdiode1__p__v - buckbranch3__idealdiode1__n__v;
  0.0 = buckbranch3__idealdiode1__p__i + buckbranch3__idealdiode1__n__i;
  buckbranch3__idealdiode1__i = buckbranch3__idealdiode1__p__i;
  buckbranch3__idealdiode1__T_heatPort = buckbranch3__idealdiode1__T;
  buckbranch3__inductor1__L * der(buckbranch3__inductor1__i) = buckbranch3__inductor1__v;
  buckbranch3__inductor1__v = buckbranch3__inductor1__p__v - buckbranch3__inductor1__n__v;
  0.0 = buckbranch3__inductor1__p__i + buckbranch3__inductor1__n__i;
  buckbranch3__inductor1__i = buckbranch3__inductor1__p__i;
  buckbranch4__idealclosingswitch1__v = buckbranch4__idealclosingswitch1__s * (if buckbranch4__idealclosingswitch1__control then buckbranch4__idealclosingswitch1__Ron else 1.0);
  buckbranch4__idealclosingswitch1__i = buckbranch4__idealclosingswitch1__s * (if buckbranch4__idealclosingswitch1__control then 1.0 else buckbranch4__idealclosingswitch1__Goff);
  buckbranch4__idealclosingswitch1__LossPower = buckbranch4__idealclosingswitch1__v * buckbranch4__idealclosingswitch1__i;
  buckbranch4__idealclosingswitch1__v = buckbranch4__idealclosingswitch1__p__v - buckbranch4__idealclosingswitch1__n__v;
  0.0 = buckbranch4__idealclosingswitch1__p__i + buckbranch4__idealclosingswitch1__n__i;
  buckbranch4__idealclosingswitch1__i = buckbranch4__idealclosingswitch1__p__i;
  buckbranch4__idealclosingswitch1__T_heatPort = buckbranch4__idealclosingswitch1__T;
  buckbranch4__idealdiode1__off = buckbranch4__idealdiode1__s < 0.0;
  buckbranch4__idealdiode1__v = buckbranch4__idealdiode1__s * (if buckbranch4__idealdiode1__off then 1.0 else buckbranch4__idealdiode1__Ron) + buckbranch4__idealdiode1__Vknee;
  buckbranch4__idealdiode1__i = buckbranch4__idealdiode1__s * (if buckbranch4__idealdiode1__off then buckbranch4__idealdiode1__Goff else 1.0) + buckbranch4__idealdiode1__Goff * buckbranch4__idealdiode1__Vknee;
  buckbranch4__idealdiode1__LossPower = buckbranch4__idealdiode1__v * buckbranch4__idealdiode1__i;
  buckbranch4__idealdiode1__v = buckbranch4__idealdiode1__p__v - buckbranch4__idealdiode1__n__v;
  0.0 = buckbranch4__idealdiode1__p__i + buckbranch4__idealdiode1__n__i;
  buckbranch4__idealdiode1__i = buckbranch4__idealdiode1__p__i;
  buckbranch4__idealdiode1__T_heatPort = buckbranch4__idealdiode1__T;
  buckbranch4__inductor1__L * der(buckbranch4__inductor1__i) = buckbranch4__inductor1__v;
  buckbranch4__inductor1__v = buckbranch4__inductor1__p__v - buckbranch4__inductor1__n__v;
  0.0 = buckbranch4__inductor1__p__i + buckbranch4__inductor1__n__i;
  buckbranch4__inductor1__i = buckbranch4__inductor1__p__i;
  capacitor1__i = capacitor1__C * der(capacitor1__v);
  capacitor1__v = capacitor1__p__v - capacitor1__n__v;
  0.0 = capacitor1__p__i + capacitor1__n__i;
  capacitor1__i = capacitor1__p__i;
  assert(1.0 + resistor1__alpha * (resistor1__T_heatPort - resistor1__T_ref) >= 0.000000000000001,"Temperature outside scope of model!");
  resistor1__R_actual = resistor1__R * (1.0 + resistor1__alpha * (resistor1__T_heatPort - resistor1__T_ref));
  resistor1__v = resistor1__R_actual * resistor1__i;
  resistor1__LossPower = resistor1__v * resistor1__i;
  resistor1__v = resistor1__p__v - resistor1__n__v;
  0.0 = resistor1__p__i + resistor1__n__i;
  resistor1__i = resistor1__p__i;
  resistor1__T_heatPort = resistor1__T;
when booleandelay2__u then
  booleandelay2__lastTrueTime = time;
  end when;
when not booleandelay2__u then
  booleandelay2__lastFalseTime = time;
  end when;
when time > booleandelay2__lastTrueTime + booleandelay2__T then
  booleandelay2__y = true;
 elsewhen time > booleandelay2__lastFalseTime + booleandelay2__T then
  booleandelay2__y = false;
  end when;
when booleandelay3__u then
  booleandelay3__lastTrueTime = time;
  end when;
when not booleandelay3__u then
  booleandelay3__lastFalseTime = time;
  end when;
when time > booleandelay3__lastTrueTime + booleandelay3__T then
  booleandelay3__y = true;
 elsewhen time > booleandelay3__lastFalseTime + booleandelay3__T then
  booleandelay3__y = false;
  end when;
when booleandelay1__u then
  booleandelay1__lastTrueTime = time;
  end when;
when not booleandelay1__u then
  booleandelay1__lastFalseTime = time;
  end when;
when time > booleandelay1__lastTrueTime + booleandelay1__T then
  booleandelay1__y = true;
 elsewhen time > booleandelay1__lastFalseTime + booleandelay1__T then
  booleandelay1__y = false;
  end when;
when sample(booleanpulse1__startTime, booleanpulse1__period) then
  booleanpulse1__pulsStart = time;
  end when;
  booleanpulse1__y = time >= booleanpulse1__pulsStart and time < booleanpulse1__pulsStart + booleanpulse1__Twidth;
  constantvoltage1__p__i + buckbranch1__pin_p__i + buckbranch2__pin_p__i + buckbranch3__pin_p__i + buckbranch4__pin_p__i = 0.0;
  constantvoltage1__n__i + ground1__p__i + buckbranch1__negativepin1__i + buckbranch2__negativepin1__i + buckbranch3__negativepin1__i + buckbranch4__negativepin1__i + capacitor1__n__i + resistor1__n__i = 0.0;
  buckbranch1__pin_n__i + buckbranch2__pin_n__i + buckbranch3__pin_n__i + buckbranch4__pin_n__i + capacitor1__p__i + resistor1__p__i = 0.0;
  (-buckbranch1__pin_p__i) + buckbranch1__idealclosingswitch1__p__i = 0.0;
  buckbranch1__idealclosingswitch1__n__i + buckbranch1__idealdiode1__n__i + buckbranch1__inductor1__p__i = 0.0;
  (-buckbranch1__negativepin1__i) + buckbranch1__idealdiode1__p__i = 0.0;
  (-buckbranch1__pin_n__i) + buckbranch1__inductor1__n__i = 0.0;
  buckbranch1__idealdiode1__p__v = buckbranch1__negativepin1__v;
  buckbranch1__idealclosingswitch1__n__v = buckbranch1__idealdiode1__n__v;
  buckbranch1__idealclosingswitch1__n__v = buckbranch1__inductor1__p__v;
  buckbranch1__idealclosingswitch1__control = buckbranch1__u;
  buckbranch1__inductor1__n__v = buckbranch1__pin_n__v;
  buckbranch1__idealclosingswitch1__p__v = buckbranch1__pin_p__v;
  (-buckbranch2__pin_p__i) + buckbranch2__idealclosingswitch1__p__i = 0.0;
  buckbranch2__idealclosingswitch1__n__i + buckbranch2__idealdiode1__n__i + buckbranch2__inductor1__p__i = 0.0;
  (-buckbranch2__negativepin1__i) + buckbranch2__idealdiode1__p__i = 0.0;
  (-buckbranch2__pin_n__i) + buckbranch2__inductor1__n__i = 0.0;
  buckbranch2__idealdiode1__p__v = buckbranch2__negativepin1__v;
  buckbranch2__idealclosingswitch1__n__v = buckbranch2__idealdiode1__n__v;
  buckbranch2__idealclosingswitch1__n__v = buckbranch2__inductor1__p__v;
  buckbranch2__idealclosingswitch1__control = buckbranch2__u;
  buckbranch2__inductor1__n__v = buckbranch2__pin_n__v;
  buckbranch2__idealclosingswitch1__p__v = buckbranch2__pin_p__v;
  (-buckbranch3__pin_p__i) + buckbranch3__idealclosingswitch1__p__i = 0.0;
  buckbranch3__idealclosingswitch1__n__i + buckbranch3__idealdiode1__n__i + buckbranch3__inductor1__p__i = 0.0;
  (-buckbranch3__negativepin1__i) + buckbranch3__idealdiode1__p__i = 0.0;
  (-buckbranch3__pin_n__i) + buckbranch3__inductor1__n__i = 0.0;
  buckbranch3__idealdiode1__p__v = buckbranch3__negativepin1__v;
  buckbranch3__idealclosingswitch1__n__v = buckbranch3__idealdiode1__n__v;
  buckbranch3__idealclosingswitch1__n__v = buckbranch3__inductor1__p__v;
  buckbranch3__idealclosingswitch1__control = buckbranch3__u;
  buckbranch3__inductor1__n__v = buckbranch3__pin_n__v;
  buckbranch3__idealclosingswitch1__p__v = buckbranch3__pin_p__v;
  (-buckbranch4__pin_p__i) + buckbranch4__idealclosingswitch1__p__i = 0.0;
  buckbranch4__idealclosingswitch1__n__i + buckbranch4__idealdiode1__n__i + buckbranch4__inductor1__p__i = 0.0;
  (-buckbranch4__negativepin1__i) + buckbranch4__idealdiode1__p__i = 0.0;
  (-buckbranch4__pin_n__i) + buckbranch4__inductor1__n__i = 0.0;
  buckbranch4__idealdiode1__p__v = buckbranch4__negativepin1__v;
  buckbranch4__idealclosingswitch1__n__v = buckbranch4__idealdiode1__n__v;
  buckbranch4__idealclosingswitch1__n__v = buckbranch4__inductor1__p__v;
  buckbranch4__idealclosingswitch1__control = buckbranch4__u;
  buckbranch4__inductor1__n__v = buckbranch4__pin_n__v;
  buckbranch4__idealclosingswitch1__p__v = buckbranch4__pin_p__v;
  booleandelay1__u = booleanpulse1__y;
  booleandelay1__u = buckbranch1__u;
  booleandelay1__y = booleandelay2__u;
  booleandelay1__y = buckbranch2__u;
  booleandelay3__y = buckbranch4__u;
  booleandelay2__y = booleandelay3__u;
  booleandelay2__y = buckbranch3__u;
  buckbranch1__pin_n__v = buckbranch2__pin_n__v;
  buckbranch1__pin_n__v = buckbranch3__pin_n__v;
  buckbranch1__pin_n__v = buckbranch4__pin_n__v;
  buckbranch1__pin_n__v = capacitor1__p__v;
  buckbranch1__pin_n__v = resistor1__p__v;
  buckbranch1__negativepin1__v = buckbranch2__negativepin1__v;
  buckbranch1__negativepin1__v = buckbranch3__negativepin1__v;
  buckbranch1__negativepin1__v = buckbranch4__negativepin1__v;
  buckbranch1__negativepin1__v = capacitor1__n__v;
  buckbranch1__negativepin1__v = constantvoltage1__n__v;
  buckbranch1__negativepin1__v = ground1__p__v;
  buckbranch1__negativepin1__v = resistor1__n__v;
  buckbranch1__pin_p__v = buckbranch2__pin_p__v;
  buckbranch1__pin_p__v = buckbranch3__pin_p__v;
  buckbranch1__pin_p__v = buckbranch4__pin_p__v;
  buckbranch1__pin_p__v = constantvoltage1__p__v;
end switching__interleaved;
