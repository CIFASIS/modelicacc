class Modelica__Electrical__Analog__Examples__HeatingMOSInverter "Heating MOS Inverter"
  Real G__p__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real G__p__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real Sin__v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
  Real Sin__i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
  Real Sin__p__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real Sin__p__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real Sin__n__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real Sin__n__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  parameter Real Sin__offset(quantity = "ElectricPotential", unit = "V") = 0.0 "Voltage offset";
  parameter Real Sin__startTime(quantity = "Time", unit = "s") = 0.0 "Time offset";
  parameter Real Sin__V(quantity = "ElectricPotential", unit = "V", start = 1.0) = 5.0 "Amplitude of sine wave";
  parameter Real Sin__phase(quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Phase of sine wave";
  parameter Real Sin__freqHz(quantity = "Frequency", unit = "Hz", start = 1.0) = 1.0 "Frequency of sine wave";
  Real Sin__signalSource__y "Connector of Real output signal";
  parameter Real Sin__signalSource__amplitude = Sin__V "Amplitude of sine wave";
  parameter Real Sin__signalSource__freqHz(quantity = "Frequency", unit = "Hz", start = 1.0) = Sin__freqHz "Frequency of sine wave";
  parameter Real Sin__signalSource__phase(quantity = "Angle", unit = "rad", displayUnit = "deg") = Sin__phase "Phase of sine wave";
  parameter Real Sin__signalSource__offset = Sin__offset "Offset of output signal";
  parameter Real Sin__signalSource__startTime(quantity = "Time", unit = "s") = Sin__startTime "Output = offset for time < startTime";
  protected constant Real Sin__signalSource__pi = 3.141592653589793;
  Real Capacitor1__v(quantity = "ElectricPotential", unit = "V", start = 0.0, fixed = true) "Voltage drop between the two pins (= p.v - n.v)";
  Real Capacitor1__i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
  Real Capacitor1__p__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real Capacitor1__p__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real Capacitor1__n__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real Capacitor1__n__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  parameter Real Capacitor1__C(quantity = "Capacitance", unit = "F", min = 0.0, start = 1.0) = 0.00001 "Capacitance";
  parameter Real HeatCapacitor1__C(quantity = "HeatCapacity", unit = "J/K") = 0.01 "Heat capacity of element (= cp*m)";
  Real HeatCapacitor1__T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 293.15, nominal = 300.0) "Temperature of element";
  Real HeatCapacitor1__der_T(quantity = "TemperatureSlope", unit = "K/s", start = 0.0) "Time derivative of temperature (= der(T))";
  Real HeatCapacitor1__port__T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Port temperature";
  Real HeatCapacitor1__port__Q_flow(quantity = "Power", unit = "W") "Heat flow rate (positive if flowing from outside into the component)";
  Real TC1__Q_flow(quantity = "Power", unit = "W") "Heat flow rate from port_a -> port_b";
  Real TC1__dT(quantity = "ThermodynamicTemperature", unit = "K") "port_a.T - port_b.T";
  Real TC1__port_a__T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Port temperature";
  Real TC1__port_a__Q_flow(quantity = "Power", unit = "W") "Heat flow rate (positive if flowing from outside into the component)";
  Real TC1__port_b__T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Port temperature";
  Real TC1__port_b__Q_flow(quantity = "Power", unit = "W") "Heat flow rate (positive if flowing from outside into the component)";
  parameter Real TC1__G(quantity = "ThermalConductance", unit = "W/K") = 0.01 "Constant thermal conductance of material";
  parameter Boolean H_PMOS__useHeatPort = true "=true, if HeatPort is enabled";
  parameter Real H_PMOS__T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) = 293.15 "Fixed device temperature if useHeatPort = false";
  Real H_PMOS__LossPower(quantity = "Power", unit = "W") "Loss power leaving component via HeatPort";
  Real H_PMOS__T_heatPort(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature of HeatPort";
  Real H_PMOS__D__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real H_PMOS__D__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real H_PMOS__G__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real H_PMOS__G__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real H_PMOS__S__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real H_PMOS__S__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real H_PMOS__B__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real H_PMOS__B__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  parameter Real H_PMOS__W(quantity = "Length", unit = "m") = 0.00002 "Width";
  parameter Real H_PMOS__L(quantity = "Length", unit = "m") = 0.000006 "Length";
  parameter Real H_PMOS__Beta(quantity = "Transconductance", unit = "A/V2") = 0.0000105 "Transconductance parameter";
  parameter Real H_PMOS__Vt(quantity = "ElectricPotential", unit = "V") = -1.0 "Zero bias threshold voltage";
  parameter Real H_PMOS__K2 = 0.41 "Bulk threshold parameter";
  parameter Real H_PMOS__K5 = 0.839 "Reduction of pinch-off region";
  parameter Real H_PMOS__dW(quantity = "Length", unit = "m") = -0.0000025 "Narrowing of channel";
  parameter Real H_PMOS__dL(quantity = "Length", unit = "m") = -0.0000021 "Shortening of channel";
  parameter Real H_PMOS__RDS(quantity = "Resistance", unit = "Ohm") = 10000000.0 "Drain-Source-Resistance";
  parameter Real H_PMOS__Tnom(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) = 300.15 "Parameter measurement temperature";
  parameter Real H_PMOS__kvt = -0.0029 "fitting parameter for Vt";
  parameter Real H_PMOS__kk2 = 0.00062 "fitting parameter for Kk2";
  protected Real H_PMOS__v;
  protected Real H_PMOS__uds;
  protected Real H_PMOS__ubs;
  protected Real H_PMOS__ugst;
  protected Real H_PMOS__ud;
  protected Real H_PMOS__us;
  protected Real H_PMOS__id;
  protected Real H_PMOS__gds;
  protected Real H_PMOS__beta_t;
  protected Real H_PMOS__vt_t;
  protected Real H_PMOS__k2_t;
  Real H_PMOS__heatPort__T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = H_PMOS__T, nominal = 300.0) = H_PMOS__T_heatPort "Port temperature";
  Real H_PMOS__heatPort__Q_flow(quantity = "Power", unit = "W") = -H_PMOS__LossPower "Heat flow rate (positive if flowing from outside into the component)";
  parameter Boolean H_NMOS__useHeatPort = true "=true, if HeatPort is enabled";
  parameter Real H_NMOS__T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) = 293.15 "Fixed device temperature if useHeatPort = false";
  Real H_NMOS__LossPower(quantity = "Power", unit = "W") "Loss power leaving component via HeatPort";
  Real H_NMOS__T_heatPort(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature of HeatPort";
  Real H_NMOS__D__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real H_NMOS__D__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real H_NMOS__G__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real H_NMOS__G__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real H_NMOS__S__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real H_NMOS__S__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real H_NMOS__B__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real H_NMOS__B__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  parameter Real H_NMOS__W(quantity = "Length", unit = "m") = 0.00002 "Width";
  parameter Real H_NMOS__L(quantity = "Length", unit = "m") = 0.000006 "Length";
  parameter Real H_NMOS__Beta(quantity = "Transconductance", unit = "A/V2") = 0.000041 "Transconductance parameter";
  parameter Real H_NMOS__Vt(quantity = "ElectricPotential", unit = "V") = 0.8 "Zero bias threshold voltage";
  parameter Real H_NMOS__K2 = 1.144 "Bulk threshold parameter";
  parameter Real H_NMOS__K5 = 0.7311 "Reduction of pinch-off region";
  parameter Real H_NMOS__dW(quantity = "Length", unit = "m") = -0.0000025 "narrowing of channel";
  parameter Real H_NMOS__dL(quantity = "Length", unit = "m") = -0.0000015 "shortening of channel";
  parameter Real H_NMOS__RDS(quantity = "Resistance", unit = "Ohm") = 10000000.0 "Drain-Source-Resistance";
  parameter Real H_NMOS__Tnom(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) = 300.15 "Parameter measurement temperature";
  parameter Real H_NMOS__kvt = -0.00696 "fitting parameter for Vt";
  parameter Real H_NMOS__kk2 = 0.0006 "fitting parameter for K22";
  protected Real H_NMOS__v;
  protected Real H_NMOS__uds;
  protected Real H_NMOS__ubs;
  protected Real H_NMOS__ugst;
  protected Real H_NMOS__ud;
  protected Real H_NMOS__us;
  protected Real H_NMOS__id;
  protected Real H_NMOS__gds;
  protected Real H_NMOS__beta_t;
  protected Real H_NMOS__vt_t;
  protected Real H_NMOS__k2_t;
  Real H_NMOS__heatPort__T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = H_NMOS__T, nominal = 300.0) = H_NMOS__T_heatPort "Port temperature";
  Real H_NMOS__heatPort__Q_flow(quantity = "Power", unit = "W") = -H_NMOS__LossPower "Heat flow rate (positive if flowing from outside into the component)";
  Real V__v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
  Real V__i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
  Real V__p__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real V__p__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real V__n__v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real V__n__i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  parameter Real V__offset(quantity = "ElectricPotential", unit = "V") = 0.0 "Voltage offset";
  parameter Real V__startTime(quantity = "Time", unit = "s") = 0.0 "Time offset";
  parameter Real V__V(quantity = "ElectricPotential", unit = "V", start = 1.0) = 5.0 "Height of ramp";
  parameter Real V__duration(quantity = "Time", unit = "s", min = 1e-60, start = 2.0) = 0.01 "Duration of ramp";
  Real V__signalSource__y "Connector of Real output signal";
  parameter Real V__signalSource__height = V__V "Height of ramps";
  parameter Real V__signalSource__duration(quantity = "Time", unit = "s", min = 0.0, start = 2.0) = V__duration "Duration of ramp (= 0.0 gives a Step)";
  parameter Real V__signalSource__offset = V__offset "Offset of output signal";
  parameter Real V__signalSource__startTime(quantity = "Time", unit = "s") = V__startTime "Output = offset for time < startTime";
  Real TC2__Q_flow(quantity = "Power", unit = "W") "Heat flow rate from port_a -> port_b";
  Real TC2__dT(quantity = "ThermodynamicTemperature", unit = "K") "port_a.T - port_b.T";
  Real TC2__port_a__T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Port temperature";
  Real TC2__port_a__Q_flow(quantity = "Power", unit = "W") "Heat flow rate (positive if flowing from outside into the component)";
  Real TC2__port_b__T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Port temperature";
  Real TC2__port_b__Q_flow(quantity = "Power", unit = "W") "Heat flow rate (positive if flowing from outside into the component)";
  parameter Real TC2__G(quantity = "ThermalConductance", unit = "W/K") = 0.01 "Constant thermal conductance of material";
  parameter Real FixedTemperature1__T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) = 300.0 "Fixed temperature at port";
  Real FixedTemperature1__port__T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Port temperature";
  Real FixedTemperature1__port__Q_flow(quantity = "Power", unit = "W") "Heat flow rate (positive if flowing from outside into the component)";
  Real TC3__Q_flow(quantity = "Power", unit = "W") "Heat flow rate from port_a -> port_b";
  Real TC3__dT(quantity = "ThermodynamicTemperature", unit = "K") "port_a.T - port_b.T";
  Real TC3__port_a__T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Port temperature";
  Real TC3__port_a__Q_flow(quantity = "Power", unit = "W") "Heat flow rate (positive if flowing from outside into the component)";
  Real TC3__port_b__T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Port temperature";
  Real TC3__port_b__Q_flow(quantity = "Power", unit = "W") "Heat flow rate (positive if flowing from outside into the component)";
  parameter Real TC3__G(quantity = "ThermalConductance", unit = "W/K") = 0.01 "Constant thermal conductance of material";
initial equation
  HeatCapacitor1__T = 293.15;
equation
  G__p__v = 0.0;
  Sin__signalSource__y = Sin__signalSource__offset + (if time < Sin__signalSource__startTime then 0.0 else Sin__signalSource__amplitude * sin(6.283185307179586 * Sin__signalSource__freqHz * (time - Sin__signalSource__startTime) + Sin__signalSource__phase));
  Sin__v = Sin__signalSource__y;
  Sin__v = Sin__p__v - Sin__n__v;
  0.0 = Sin__p__i + Sin__n__i;
  Sin__i = Sin__p__i;
  Capacitor1__i = Capacitor1__C * der(Capacitor1__v);
  Capacitor1__v = Capacitor1__p__v - Capacitor1__n__v;
  0.0 = Capacitor1__p__i + Capacitor1__n__i;
  Capacitor1__i = Capacitor1__p__i;
  HeatCapacitor1__T = HeatCapacitor1__port__T;
  HeatCapacitor1__der_T = der(HeatCapacitor1__T);
  HeatCapacitor1__C * der(HeatCapacitor1__T) = HeatCapacitor1__port__Q_flow;
  TC1__Q_flow = TC1__G * TC1__dT;
  TC1__dT = TC1__port_a__T - TC1__port_b__T;
  TC1__port_a__Q_flow = TC1__Q_flow;
  TC1__port_b__Q_flow = -TC1__Q_flow;
  assert(H_PMOS__L + H_PMOS__dL > 0.0,"HeatingPMOS: Effective length must be positive");
  assert(H_PMOS__W + H_PMOS__dW > 0.0,"HeatingPMOS: Effective width  must be positive");
  assert(H_PMOS__T_heatPort > 0.0,"HeatingPMOS: Temperature must be positive");
  H_PMOS__gds = if H_PMOS__RDS < 1e-20 and H_PMOS__RDS > -1e-20 then 1e+20 else 1.0 / H_PMOS__RDS;
  H_PMOS__v = H_PMOS__beta_t * (H_PMOS__W + H_PMOS__dW) / (H_PMOS__L + H_PMOS__dL);
  H_PMOS__ud = if H_PMOS__D__v > H_PMOS__S__v then H_PMOS__S__v else H_PMOS__D__v;
  H_PMOS__us = if H_PMOS__D__v > H_PMOS__S__v then H_PMOS__D__v else H_PMOS__S__v;
  H_PMOS__uds = H_PMOS__ud - H_PMOS__us;
  H_PMOS__ubs = if H_PMOS__B__v < H_PMOS__us then 0.0 else H_PMOS__B__v - H_PMOS__us;
  H_PMOS__ugst = (H_PMOS__G__v + H_PMOS__k2_t * H_PMOS__ubs + (-H_PMOS__vt_t) - H_PMOS__us) * H_PMOS__K5;
  H_PMOS__id = if H_PMOS__ugst >= 0.0 then H_PMOS__uds * H_PMOS__gds else if H_PMOS__ugst < H_PMOS__uds then (-H_PMOS__v) * H_PMOS__uds * (H_PMOS__ugst + (-H_PMOS__uds) / 2.0) + H_PMOS__uds * H_PMOS__gds else 0.5 * (-H_PMOS__v) * H_PMOS__ugst ^ 2.0 + H_PMOS__uds * H_PMOS__gds;
  H_PMOS__beta_t = H_PMOS__Beta * ((H_PMOS__T_heatPort / H_PMOS__Tnom) ^ (-1.5));
  H_PMOS__vt_t = H_PMOS__Vt * (1.0 + (H_PMOS__T_heatPort - H_PMOS__Tnom) * H_PMOS__kvt);
  H_PMOS__k2_t = H_PMOS__K2 * (1.0 + (H_PMOS__T_heatPort - H_PMOS__Tnom) * H_PMOS__kk2);
  H_PMOS__G__i = 0.0;
  H_PMOS__D__i = if H_PMOS__D__v > H_PMOS__S__v then -H_PMOS__id else H_PMOS__id;
  H_PMOS__S__i = if H_PMOS__D__v > H_PMOS__S__v then H_PMOS__id else -H_PMOS__id;
  H_PMOS__B__i = 0.0;
  H_PMOS__LossPower = H_PMOS__D__i * (H_PMOS__D__v - H_PMOS__S__v);
  assert(H_NMOS__L + H_NMOS__dL > 0.0,"Heating NMOS: Effective length must be positive");
  assert(H_NMOS__W + H_NMOS__dW > 0.0,"Heating NMOS: Effective width  must be positive");
  assert(H_NMOS__T_heatPort > 0.0,"Heating NMOS: Temperature must be positive");
  H_NMOS__gds = if H_NMOS__RDS < 1e-20 and H_NMOS__RDS > -1e-20 then 1e+20 else 1.0 / H_NMOS__RDS;
  H_NMOS__v = H_NMOS__beta_t * (H_NMOS__W + H_NMOS__dW) / (H_NMOS__L + H_NMOS__dL);
  H_NMOS__ud = if H_NMOS__D__v < H_NMOS__S__v then H_NMOS__S__v else H_NMOS__D__v;
  H_NMOS__us = if H_NMOS__D__v < H_NMOS__S__v then H_NMOS__D__v else H_NMOS__S__v;
  H_NMOS__uds = H_NMOS__ud - H_NMOS__us;
  H_NMOS__ubs = if H_NMOS__B__v > H_NMOS__us then 0.0 else H_NMOS__B__v - H_NMOS__us;
  H_NMOS__ugst = (H_NMOS__G__v + H_NMOS__k2_t * H_NMOS__ubs + (-H_NMOS__vt_t) - H_NMOS__us) * H_NMOS__K5;
  H_NMOS__id = if H_NMOS__ugst <= 0.0 then H_NMOS__uds * H_NMOS__gds else if H_NMOS__ugst > H_NMOS__uds then H_NMOS__v * H_NMOS__uds * (H_NMOS__ugst + (-H_NMOS__uds) / 2.0) + H_NMOS__uds * H_NMOS__gds else 0.5 * H_NMOS__v * H_NMOS__ugst ^ 2.0 + H_NMOS__uds * H_NMOS__gds;
  H_NMOS__beta_t = H_NMOS__Beta * ((H_NMOS__T_heatPort / H_NMOS__Tnom) ^(-1.5));
  H_NMOS__vt_t = H_NMOS__Vt * (1.0 + (H_NMOS__T_heatPort - H_NMOS__Tnom) * H_NMOS__kvt);
  H_NMOS__k2_t = H_NMOS__K2 * (1.0 + (H_NMOS__T_heatPort - H_NMOS__Tnom) * H_NMOS__kk2);
  H_NMOS__G__i = 0.0;
  H_NMOS__D__i = if H_NMOS__D__v < H_NMOS__S__v then -H_NMOS__id else H_NMOS__id;
  H_NMOS__S__i = if H_NMOS__D__v < H_NMOS__S__v then H_NMOS__id else -H_NMOS__id;
  H_NMOS__B__i = 0.0;
  H_NMOS__LossPower = H_NMOS__D__i * (H_NMOS__D__v - H_NMOS__S__v);
  V__signalSource__y = V__signalSource__offset + (if time < V__signalSource__startTime then 0.0 else if time < V__signalSource__startTime + V__signalSource__duration then (time - V__signalSource__startTime) * V__signalSource__height / V__signalSource__duration else V__signalSource__height);
  V__v = V__signalSource__y;
  V__v = V__p__v - V__n__v;
  0.0 = V__p__i + V__n__i;
  V__i = V__p__i;
  TC2__Q_flow = TC2__G * TC2__dT;
  TC2__dT = TC2__port_a__T - TC2__port_b__T;
  TC2__port_a__Q_flow = TC2__Q_flow;
  TC2__port_b__Q_flow = -TC2__Q_flow;
  FixedTemperature1__port__T = FixedTemperature1__T;
  TC3__Q_flow = TC3__G * TC3__dT;
  TC3__dT = TC3__port_a__T - TC3__port_b__T;
  TC3__port_a__Q_flow = TC3__Q_flow;
  TC3__port_b__Q_flow = -TC3__Q_flow;
  G__p__i + Sin__n__i + Capacitor1__n__i + H_NMOS__S__i + H_NMOS__B__i + V__n__i = 0.0;
  Sin__p__i + H_PMOS__G__i + H_NMOS__G__i = 0.0;
  Capacitor1__p__i + H_PMOS__S__i + H_NMOS__D__i = 0.0;
  HeatCapacitor1__port__Q_flow + TC1__port_b__Q_flow + TC2__port_b__Q_flow + TC3__port_a__Q_flow = 0.0;
  TC1__port_a__Q_flow + H_PMOS__heatPort__Q_flow = 0.0;
  H_PMOS__D__i + H_PMOS__B__i + V__p__i = 0.0;
  H_NMOS__heatPort__Q_flow + TC2__port_a__Q_flow = 0.0;
  FixedTemperature1__port__Q_flow + TC3__port_b__Q_flow = 0.0;
  Capacitor1__n__v = G__p__v;
  Capacitor1__n__v = H_NMOS__B__v;
  Capacitor1__n__v = H_NMOS__S__v;
  Capacitor1__n__v = Sin__n__v;
  Capacitor1__n__v = V__n__v;
  Capacitor1__p__v = H_NMOS__D__v;
  Capacitor1__p__v = H_PMOS__S__v;
  H_PMOS__B__v = H_PMOS__D__v;
  H_PMOS__B__v = V__p__v;
  HeatCapacitor1__port__T = TC1__port_b__T;
  HeatCapacitor1__port__T = TC2__port_b__T;
  HeatCapacitor1__port__T = TC3__port_a__T;
  H_PMOS__heatPort__T = TC1__port_a__T;
  H_NMOS__heatPort__T = TC2__port_a__T;
  FixedTemperature1__port__T = TC3__port_b__T;
  H_NMOS__G__v = H_PMOS__G__v;
  H_NMOS__G__v = Sin__p__v;
end Modelica__Electrical__Analog__Examples__HeatingMOSInverter;
