class Damper

  parameter Real mass1__L(quantity = "Length", unit = "m", start = 0.0) = 1.0 "Length of component, from left flange to right flange (= flange_b.s - flange_a.s)";
  parameter Real mass1__m(quantity = "Mass", unit = "kg", min = 0.0, start = 1.0) = 1.0 "Mass of the sliding mass";
  parameter Real damper1__s_nominal(quantity = "Length", unit = "m", min = 0.0) = 0.0001 "Nominal value of s_rel (used for scaling)";
  parameter Boolean damper1__useHeatPort = false "=true, if heatPort is enabled";
  parameter Real damper1__d(quantity = "TranslationalDampingConstant", unit = "N.s/m", min = 0.0, start = 0.0) = 25.0 "Damping constant";
  parameter Real fixed1__s0(quantity = "Length", unit = "m") = 4.5 "Fixed offset position of housing";
  parameter Real mass2__L(quantity = "Length", unit = "m", start = 0.0) = 1.0 "Length of component, from left flange to right flange (= flange_b.s - flange_a.s)";
  parameter Real mass2__m(quantity = "Mass", unit = "kg", min = 0.0, start = 1.0) = 1.0 "Mass of the sliding mass";
  parameter Real damper2__s_nominal(quantity = "Length", unit = "m", min = 0.0) = 0.0001 "Nominal value of s_rel (used for scaling)";
  parameter Boolean damper2__useHeatPort = false "=true, if heatPort is enabled";
  parameter Real damper2__d(quantity = "TranslationalDampingConstant", unit = "N.s/m", min = 0.0, start = 0.0) = 25.0 "Damping constant";
  parameter Real fixed2__s0(quantity = "Length", unit = "m") = 4.5 "Fixed offset position of housing";
  parameter Real mass3__L(quantity = "Length", unit = "m", start = 0.0) = 1.0 "Length of component, from left flange to right flange (= flange_b.s - flange_a.s)";
  parameter Real mass3__m(quantity = "Mass", unit = "kg", min = 0.0, start = 1.0) = 1.0 "Mass of the sliding mass";
  parameter Real fixed3__s0(quantity = "Length", unit = "m") = 4.5 "Fixed offset position of housing";
  parameter Real spring2__c(quantity = "TranslationalSpringConstant", unit = "N/m", min = 0.0, start = 1.0) = 1.0 "Spring constant ";
  parameter Real spring2__s_rel0(quantity = "Length", unit = "m", min = 0.0) = 1.0 "Unstretched spring length";
  parameter Real springDamper3__s_nominal(quantity = "Length", unit = "m", min = 0.0) = 0.0001 "Nominal value of s_rel (used for scaling)";
  parameter Boolean springDamper3__useHeatPort = false "=true, if heatPort is enabled";
  parameter Real springDamper3__c(quantity = "TranslationalSpringConstant", unit = "N/m", min = 0.0, start = 1.0) = 1.0 "Spring constant";
  parameter Real springDamper3__d(quantity = "TranslationalDampingConstant", unit = "N.s/m", min = 0.0, start = 1.0) = 25.0 "Damping constant";
  parameter Real springDamper3__s_rel0(quantity = "Length", unit = "m") = 1.0 "Unstretched spring length";

  Real mass1__flange_a__s(quantity = "Length", unit = "m") "Absolute position of flange";
  Real mass1__flange_a__f(quantity = "Force", unit = "N") "Cut force directed into flange";
  Real mass1__flange_b__s(quantity = "Length", unit = "m") "Absolute position of flange";
  Real mass1__flange_b__f(quantity = "Force", unit = "N") "Cut force directed into flange";
  Real mass1__a(quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of component";
  Real mass1__s(quantity = "Length", unit = "m", start = 3.0, fixed = true, stateSelect = StateSelect.default) "Absolute position of center of component (s = flange_a.s + L/2 = flange_b.s - L/2)";
  Real mass1__v(quantity = "Velocity", unit = "m/s", start = 10.0, fixed = true, stateSelect = StateSelect.default) "Absolute velocity of component";
  Real damper1__f(quantity = "Force", unit = "N") "Forces between flanges (= flange_b.f)";
  Real damper1__flange_a__s(quantity = "Length", unit = "m") "Absolute position of flange";
  Real damper1__flange_a__f(quantity = "Force", unit = "N") "Cut force directed into flange";
  Real damper1__flange_b__s(quantity = "Length", unit = "m") "Absolute position of flange";
  Real damper1__flange_b__f(quantity = "Force", unit = "N") "Cut force directed into flange";
  Real damper1__lossPower(quantity = "Power", unit = "W") "Loss power leaving component via heatPort (> 0, if heat is flowing out of component)";
  Real damper1__v_rel(quantity = "Velocity", unit = "m/s", start = 0.0, stateSelect = StateSelect.prefer) "Relative velocity (= der(s_rel))";
  Real damper1__s_rel(quantity = "Length", unit = "m", start = 0.0, nominal = damper1__s_nominal, stateSelect = StateSelect.prefer) "Relative distance (= flange_b.s - flange_a.s)";
  Real fixed1__flange__s(quantity = "Length", unit = "m") "Absolute position of flange";
  Real fixed1__flange__f(quantity = "Force", unit = "N") "Cut force directed into flange";
  Real mass2__flange_a__s(quantity = "Length", unit = "m") "Absolute position of flange";
  Real mass2__flange_a__f(quantity = "Force", unit = "N") "Cut force directed into flange";
  Real mass2__flange_b__s(quantity = "Length", unit = "m") "Absolute position of flange";
  Real mass2__flange_b__f(quantity = "Force", unit = "N") "Cut force directed into flange";
  Real mass2__a(quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of component";
  Real mass2__s(quantity = "Length", unit = "m", start = 3.0, fixed = true, stateSelect = StateSelect.default) "Absolute position of center of component (s = flange_a.s + L/2 = flange_b.s - L/2)";
  Real mass2__v(quantity = "Velocity", unit = "m/s", start = 10.0, fixed = true, stateSelect = StateSelect.default) "Absolute velocity of component";
  Real damper2__f(quantity = "Force", unit = "N") "Forces between flanges (= flange_b.f)";
  Real damper2__flange_a__s(quantity = "Length", unit = "m") "Absolute position of flange";
  Real damper2__flange_a__f(quantity = "Force", unit = "N") "Cut force directed into flange";
  Real damper2__flange_b__s(quantity = "Length", unit = "m") "Absolute position of flange";
  Real damper2__flange_b__f(quantity = "Force", unit = "N") "Cut force directed into flange";
  Real damper2__lossPower(quantity = "Power", unit = "W") "Loss power leaving component via heatPort (> 0, if heat is flowing out of component)";
  Real damper2__v_rel(quantity = "Velocity", unit = "m/s", start = 0.0, stateSelect = StateSelect.prefer) "Relative velocity (= der(s_rel))";
  Real damper2__s_rel(quantity = "Length", unit = "m", start = 0.0, nominal = damper2__s_nominal, stateSelect = StateSelect.prefer) "Relative distance (= flange_b.s - flange_a.s)";
  Real fixed2__flange__s(quantity = "Length", unit = "m") "Absolute position of flange";
  Real fixed2__flange__f(quantity = "Force", unit = "N") "Cut force directed into flange";
  Real mass3__flange_a__s(quantity = "Length", unit = "m") "Absolute position of flange";
  Real mass3__flange_a__f(quantity = "Force", unit = "N") "Cut force directed into flange";
  Real mass3__flange_b__s(quantity = "Length", unit = "m") "Absolute position of flange";
  Real mass3__flange_b__f(quantity = "Force", unit = "N") "Cut force directed into flange";
  Real mass3__a(quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of component";
  Real mass3__s(quantity = "Length", unit = "m", start = 3.0, fixed = true, stateSelect = StateSelect.default) "Absolute position of center of component (s = flange_a.s + L/2 = flange_b.s - L/2)";
  Real mass3__v(quantity = "Velocity", unit = "m/s", start = 10.0, fixed = true, stateSelect = StateSelect.default) "Absolute velocity of component";
  Real fixed3__flange__s(quantity = "Length", unit = "m") "Absolute position of flange";
  Real fixed3__flange__f(quantity = "Force", unit = "N") "Cut force directed into flange";
  Real spring2__flange_a__s(quantity = "Length", unit = "m") "Absolute position of flange";
  Real spring2__flange_a__f(quantity = "Force", unit = "N") "Cut force directed into flange";
  Real spring2__flange_b__s(quantity = "Length", unit = "m") "Absolute position of flange";
  Real spring2__flange_b__f(quantity = "Force", unit = "N") "Cut force directed into flange";
  Real spring2__s_rel(quantity = "Length", unit = "m", start = 0.0) "Relative distance (= flange_b.s - flange_a.s)";
  Real spring2__f(quantity = "Force", unit = "N") "Force between flanges (positive in direction of flange axis R)";
  Real springDamper3__f(quantity = "Force", unit = "N") "Forces between flanges (= flange_b.f)";
  Real springDamper3__flange_a__s(quantity = "Length", unit = "m") "Absolute position of flange";
  Real springDamper3__flange_a__f(quantity = "Force", unit = "N") "Cut force directed into flange";
  Real springDamper3__flange_b__s(quantity = "Length", unit = "m") "Absolute position of flange";
  Real springDamper3__flange_b__f(quantity = "Force", unit = "N") "Cut force directed into flange";
  Real springDamper3__lossPower(quantity = "Power", unit = "W") "Loss power leaving component via heatPort (> 0, if heat is flowing out of component)";
  protected Real springDamper3__f_c(quantity = "Force", unit = "N") "Spring force";
  protected Real springDamper3__f_d(quantity = "Force", unit = "N") "Damping force";
  Real springDamper3__v_rel(quantity = "Velocity", unit = "m/s", start = 0.0, stateSelect = StateSelect.prefer) "Relative velocity (= der(s_rel))";
  Real springDamper3__s_rel(quantity = "Length", unit = "m", start = 0.0, nominal = springDamper3__s_nominal, stateSelect = StateSelect.prefer) "Relative distance (= flange_b.s - flange_a.s)";
equation
  mass1__v = der(mass1__s);
  mass1__a = der(mass1__v);
  mass1__m * mass1__a = mass1__flange_a__f + mass1__flange_b__f;
  mass1__flange_a__s = mass1__s + (-mass1__L) / 2.0;
  mass1__flange_b__s = mass1__s + mass1__L / 2.0;
  damper1__f = damper1__d * damper1__v_rel;
  damper1__lossPower = damper1__f * damper1__v_rel;
  damper1__s_rel = damper1__flange_b__s - damper1__flange_a__s;
  damper1__v_rel = der(damper1__s_rel);
  damper1__flange_b__f = damper1__f;
  damper1__flange_a__f = -damper1__f;
  fixed1__flange__s = fixed1__s0;
  mass2__v = der(mass2__s);
  mass2__a = der(mass2__v);
  mass2__m * mass2__a = mass2__flange_a__f + mass2__flange_b__f;
  mass2__flange_a__s = mass2__s + (-mass2__L) / 2.0;
  mass2__flange_b__s = mass2__s + mass2__L / 2.0;
  damper2__f = damper2__d * damper2__v_rel;
  damper2__lossPower = damper2__f * damper2__v_rel;
  damper2__s_rel = damper2__flange_b__s - damper2__flange_a__s;
  damper2__v_rel = der(damper2__s_rel);
  damper2__flange_b__f = damper2__f;
  damper2__flange_a__f = -damper2__f;
  fixed2__flange__s = fixed2__s0;
  mass3__v = der(mass3__s);
  mass3__a = der(mass3__v);
  mass3__m * mass3__a = mass3__flange_a__f + mass3__flange_b__f;
  mass3__flange_a__s = mass3__s + (-mass3__L) / 2.0;
  mass3__flange_b__s = mass3__s + mass3__L / 2.0;
  fixed3__flange__s = fixed3__s0;
  spring2__f = spring2__c * (spring2__s_rel - spring2__s_rel0);
  spring2__s_rel = spring2__flange_b__s - spring2__flange_a__s;
  spring2__flange_b__f = spring2__f;
  spring2__flange_a__f = -spring2__f;
  springDamper3__f_c = springDamper3__c * (springDamper3__s_rel - springDamper3__s_rel0);
  springDamper3__f_d = springDamper3__d * springDamper3__v_rel;
  springDamper3__f = springDamper3__f_c + springDamper3__f_d;
  springDamper3__lossPower = springDamper3__f_d * springDamper3__v_rel;
  springDamper3__s_rel = springDamper3__flange_b__s - springDamper3__flange_a__s;
  springDamper3__v_rel = der(springDamper3__s_rel);
  springDamper3__flange_b__f = springDamper3__f;
  springDamper3__flange_a__f = -springDamper3__f;
  mass1__flange_a__f = 0.0;
  mass1__flange_b__f + damper1__flange_a__f = 0.0;
  damper1__flange_b__f + fixed1__flange__f = 0.0;
  mass2__flange_a__f = 0.0;
  mass2__flange_b__f + damper2__flange_a__f + spring2__flange_a__f = 0.0;
  damper2__flange_b__f + fixed2__flange__f + spring2__flange_b__f = 0.0;
  mass3__flange_a__f = 0.0;
  mass3__flange_b__f + springDamper3__flange_a__f = 0.0;
  fixed3__flange__f + springDamper3__flange_b__f = 0.0;
  damper1__flange_a__s = mass1__flange_b__s;
  damper2__flange_a__s = mass2__flange_b__s;
  damper2__flange_a__s = spring2__flange_a__s;
  damper2__flange_b__s = fixed2__flange__s;
  damper2__flange_b__s = spring2__flange_b__s;
  mass3__flange_b__s = springDamper3__flange_a__s;
  damper1__flange_b__s = fixed1__flange__s;
  fixed3__flange__s = springDamper3__flange_b__s;
end Damper;
