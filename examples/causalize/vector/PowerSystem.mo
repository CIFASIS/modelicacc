model PowerSystem
  constant Real pi = 3.1416;
  import SI = Modelica.SIunits;
  parameter Integer N = 12 "Number of generators in the network";
  parameter Integer M = 12 "Number of volumes in the superheater models";

  parameter Real P_load[N](each nominal = 1e9) = ones(N) * P_nom "Active power consumed by loads - replace the default binding";
  parameter Real P_nom = 500e6 "Nominal power of a single generator";
  parameter Real f_ref = 50 "Reference network frequency";
  parameter Real omega_ref = 2 * pi * f_ref;
  parameter SI.Time T_sfc = 20 "Time constant of secondary frequency control";
  parameter Real P_d = 0.5 * P_nom / omega_ref "Power dissipation coefficient";
  parameter Real droop = 0.10 "Average network droop";

/////////////////////////
  parameter Integer generator_NFV = M "Number of finite volumes for the superheater model";
  parameter Real generator_P_nom = 500e6 "Nominal power of the generator";
  parameter Real generator_f_ref = 50 "Reference network frequency";
  parameter SI.Time generator_T_a = 5 "Characteristic time of the generator";
  parameter Real generator_alpha = 0.3     "Fraction of turbine power provided by the high-pressure turbine";
  parameter Real generator_T_source = 1.5     "Normalized temperature of heat source for the superheater";
  parameter Real generator_NTU = 2 "Number of thermal units in the superheater";
  parameter SI.Time generator_tau_b = 200     "Characteristic time of energy storage in the boiler";
  parameter SI.Time generator_tau_t = 8     "Characteristic response time of the low pressure turbine";
  parameter SI.Time generator_tau_q = 3     "Characteristic time of thermal generation process";
  parameter SI.Time generator_tau_sh = 100     "Characteristic time of the superheater thermal response";
  parameter SI.Time generator_tau_y = 0.3 "Characteristic time of turbine governor";
  parameter Real generator_droop = 0.1 "Primary frequency control droop";
  parameter Real generator_Kp_p = 10 "Proportional gain of pressure controller";
  parameter SI.Time generator_Ti_p = 70 "Integral time of pressure controller";
  parameter Real generator_Kp_t = 2 "Proportional gain of power controller";
  parameter SI.Time generator_Ti_t = 0.3 "Integral time of power controller";
  final parameter Real generator_omega_ref = 2*pi*generator_f_ref;
  final parameter SI.MomentOfInertia generator_J = generator_P_nom*generator_T_a/(generator_omega_ref^2);
  parameter Real generator_P_a(nominal = 1e9) = generator_P_nom "Active electrical power produced by the synchronous generator - replace the default binding"; 
  parameter Real generator_P_t_0(nominal = 1e9) = generator_P_nom     "Active power set point - replace the default binding";
  parameter Real generator_P_sfc(nominal = 1e9) = 0 "Additional power request for secondary frequency control - replace the default binding";
  parameter Real generator_p_0 = 1 "Boiler pressure set point in p.u."; 
  
  Real generator_P_t[N] "Mechanical power generated by the turbine [W]";
  Real generator_theta[N]     "Rotor angle relative to reference rotating at nominal speed";
  Real generator_omega[N] "Turbine angular speed";
  Real generator_f[N] "Generator frequency";
  Real generator_delta_f[N] "Normalized frequency error";
  Real generator_p[N] "Boiler pressure in p.u.";
  Real generator_w_s[N] "Steam flow rate in p.u.";
  Real generator_q_ev[N] "Thermal power to the boiler in p.u.";
  Real generator_q_ev_0[N] "Thermal power set point in p.u.";
  Real generator_y_t[N] "Turbine admittance in p.u";
  Real generator_y_t_0[N] "Turbine admittance set point in p.u.";
  Real generator_p_t[N] "Turbine power in p.u.";
  Real generator_p_t_0[N] "Turbine power set point in p.u.";
  Real generator_p_t_0_fc[N] "Turbine power set point in p.u. with frequency control corrections";
  Real generator_p_t_lp[N] "Low-pressure turbine power in p.u.";
  Real generator_T_s[N,generator_NFV] "Normalized temperature states for the superheater model";
  Real generator_T_s_b[N,generator_NFV+1] "Normalized temperature at the boundaries of the superheater volumes";

  Real generator_err_p_t[N] "Power controller error in p.u.";
  Real generator_err_p_t_int[N] "Integral of power controller error";

  Real generator_err_p[N] "Pressure controller error in p.u.";
  Real generator_err_p_int[N] "Pressure controller integral error";

/////////////////////////



  Real f "Network frequency measured at node 1 for secondary frequency control";

  Real P_ex[N, N](each nominal = 1e9) "Power going from generator i to generator j";
  Real P_diss[N, N](each nominal = 1e9) "Power dissipated by the generators i and j";
  Real P_a[N](each nominal = 1e9) "Net active power out of generator i";
  parameter Real P_f(nominal = 1e9) = P_nom "Power factor of a single trunk of transmission line";
  Real P_sfc(nominal = 1e9) "Additional power request for secondary frequency control";
  //Generator generator[N](P_a = P_a, each P_nom = P_nom, each P_sfc = P_sfc / N, each NFV = M);

equation
  // Rotor phase angle equation (relative to reference rotating at reference speed)
  for i in 1:N loop
    der(generator_theta[i]) = generator_omega[i] - generator_omega_ref;
  end for;

  // Energy balance on the turbine-generator axis
  for i in 1:N loop
//    der(generator_J*generator_omega[i]^2/2) = generator_P_t[i] - generator_P_a;
      der(generator_omega[i]) = generator_P_t[i] - generator_P_a;
  end for;

  // Non-dimensional boiler model
  for i in 1:N loop
    generator_tau_b*der(generator_p[i]) = generator_q_ev[i] - generator_w_s[i];
  end for;

  // Non-dimensional turbine model
  for i in 1:N loop
    generator_w_s[i] = generator_y_t[i]*generator_p[i] "steam flow";
    generator_tau_t*der(generator_p_t_lp[i]) + generator_p_t_lp[i] = (1-generator_alpha)*generator_w_s[i] "LP turbine power";
    generator_p_t[i] = generator_alpha *generator_w_s[i] + generator_p_t_lp[i] "Total turbine power";
  
    // Non-dimensional steam temperature model
    generator_T_s_b[i,1] = generator_p[i] "Boundary condion at inlet";
    
  end for;
  for i in 1:N, j in 2:generator_NFV+1 loop
	generator_T_s_b[i,j] = generator_T_s[i,j-1] "Upwind discretization scheme";
  end for;
  for i in 1:generator_NFV, j  in 1:N loop
    generator_tau_sh/generator_NFV * der(generator_T_s[j,i]) =/* generator_w_s[j]**/(generator_T_s_b[j,i] - generator_T_s_b[j,i+1]) + generator_NTU/generator_NFV*(generator_T_source - generator_T_s_b[j,i+1]);
  end for;

  // Actuation
  for j in 1:N loop
    generator_tau_y*der(generator_y_t[j]) = generator_y_t_0[j] - generator_y_t[j];
    generator_tau_q*der(generator_q_ev[j]) = generator_q_ev_0[j] - generator_q_ev[j];
  end for;

  // Normalization equations
  for j in 1:N loop
    generator_P_t[j] = generator_p_t[j]*generator_P_nom;
    generator_P_t_0 = generator_p_t_0[j]*generator_P_nom;
  end for;
  
  // Boiler follows control strategy with primary and secondary frequency control
  for j in 1:N loop
    generator_f[j] = generator_omega[j]/(2*pi);
    generator_delta_f[j] = (generator_f[j] - generator_f_ref)/generator_f_ref;
    generator_p_t_0_fc[j] = generator_p_t_0[j] - 1/generator_droop*generator_delta_f[j] +    generator_P_sfc/generator_P_nom;
    generator_err_p_t[j] = generator_p_t_0_fc[j] - generator_p_t[j];
    der(generator_err_p_t_int[j]) = generator_err_p_t[j];
    generator_err_p[j] = generator_p_0 - generator_p[j];
    der(generator_err_p_int[j]) = generator_err_p[j];

    generator_q_ev_0[j] = generator_p_t_0_fc[j] + generator_Kp_p*(generator_err_p[j] + 1/generator_Ti_p *generator_err_p_int[j]);
    generator_y_t_0[j] = generator_p_t_0_fc[j] + generator_Kp_t*(generator_err_p_t[j] + 1/generator_Ti_t *generator_err_p_t_int[j]);
  end for;
initial equation
  for j in 1:N loop
  generator_theta[j] = 0;
  generator_omega[j] = generator_omega_ref;
  generator_p[j] = 1;
  generator_p_t_lp[j] = (1-generator_alpha);
  generator_y_t[j] = 1;
  generator_q_ev[j] = 1;
  generator_err_p_t_int[j] = 0;
  generator_err_p_int[j] = 0;
  generator_T_s[j,1] = (generator_p[j] + generator_NTU/generator_NFV*generator_T_source)/(1 + generator_NTU/generator_NFV);
  end for;
  for i in 2:generator_NFV, j in 1:N loop
      generator_T_s[j,i] = (generator_T_s[j,i-1] + generator_NTU/generator_NFV*generator_T_source)/(1 + generator_NTU/generator_NFV);
  end for;

equation
  for i in 1:N loop
    P_a[i] =sum(P_ex[i, :]) + sum(P_diss[i, :]) + P_load[i];
  end for;
  for i in 1:N, j in 1:N loop
    P_ex[i, j] = if i==j then 0 else P_f / abs(i - j) * sin(generator_theta[i] - generator_theta[j]);
    P_diss[i, j] = if i == j then 0 else P_d * (generator_omega[i] - generator_omega[j]);
  end for;

  f = generator_f[1];
  T_sfc * der(P_sfc) = (f_ref - f) / f_ref * P_nom * N / droop;
initial equation
  P_sfc = 0;
  annotation(Documentation(info = "<html>
<p>This model assembles a power system with a linear topology, obtained by connecting N power generators in a linear network with equal transmission lines, and with a load connected to each generator. For simplicity, the loads are described by prescribed active power consumptions.</p>
<p>The power transfer between the different generators is computed by the classical swing equation theory. An integral controllers provides secondary frequency control.</p>
</html>"));
end PowerSystem;
